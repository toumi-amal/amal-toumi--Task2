Questions,Answers
What is Python?¶,"Python is an interpreted, interactive, object-oriented programming language.  It
incorporates modules, exceptions, dynamic typing, very high level dynamic data
types, and classes.  It supports multiple programming paradigms beyond
object-oriented programming, such as procedural and functional programming.
Python combines remarkable power with very clear syntax. It has interfaces to
many system calls and libraries, as well as to various window systems, and is
extensible in C or C++.  It is also usable as an extension language for
applications that need a programmable interface. Finally, Python is portable:
it runs on many Unix variants including Linux and macOS, and on Windows.
To find out more, start with The Python Tutorial.  The Beginners Guide to
Python links to other
introductory tutorials and resources for learning Python.
The Python Software Foundation is an independent non-profit organization that
holds the copyright on Python versions 2.1 and newer.  The PSFs mission is to
advance open source technology related to the Python programming language and to
publicize the use of Python.  The PSFs home page is at
https://www.python.org/psf/.
Donations to the PSF are tax-exempt in the US.  If you use Python and find it
helpful, please contribute via the PSF donation page.
You can do anything you want with the source, as long as you leave the
copyrights in and display those copyrights in any documentation about Python
that you produce.  If you honor the copyright rules, its OK to use Python for
commercial use, to sell copies of Python in source or binary form (modified or
unmodified), or to sell products that incorporate Python in some form.  We would
still like to know about all commercial use of Python, of course.
See the license page to find further
explanations and the full text of the PSF License.
The Python logo is trademarked, and in certain cases permission is required to
use it.  Consult the Trademark Usage Policy for more information.
Heres a very brief summary of what started it all, written by Guido van
Rossum:
I had extensive experience with implementing an interpreted language in the
ABC group at CWI, and from working with this group I had learned a lot about
language design.  This is the origin of many Python features, including the
use of indentation for statement grouping and the inclusion of
very-high-level data types (although the details are all different in
Python).
I had a number of gripes about the ABC language, but also liked many of its
features.  It was impossible to extend the ABC language (or its
implementation) to remedy my complaints  in fact its lack of extensibility
was one of its biggest problems.  I had some experience with using Modula-2+
and talked with the designers of Modula-3 and read the Modula-3 report.
Modula-3 is the origin of the syntax and semantics used for exceptions, and
some other Python features.
I was working in the Amoeba distributed operating system group at CWI.  We
needed a better way to do system administration than by writing either C
programs or Bourne shell scripts, since Amoeba had its own system call
interface which wasnt easily accessible from the Bourne shell.  My
experience with error handling in Amoeba made me acutely aware of the
importance of exceptions as a programming language feature.
It occurred to me that a scripting language with a syntax like ABC but with
access to the Amoeba system calls would fill the need.  I realized that it
would be foolish to write an Amoeba-specific language, so I decided that I
needed a language that was generally extensible.
During the 1989 Christmas holidays, I had a lot of time on my hand, so I
decided to give it a try.  During the next year, while still mostly working
on it in my own time, Python was used in the Amoeba project with increasing
success, and the feedback from colleagues made me add many early
improvements.
In February 1991, after just over a year of development, I decided to post to
USENET.  The rest is in the Misc/HISTORY file.
Python is a high-level general-purpose programming language that can be applied
to many different classes of problems.
The language comes with a large standard library that covers areas such as
string processing (regular expressions, Unicode, calculating differences between
files), internet protocols (HTTP, FTP, SMTP, XML-RPC, POP, IMAP),
software engineering (unit testing, logging, profiling, parsing
Python code), and operating system interfaces (system calls, filesystems, TCP/IP
sockets).  Look at the table of contents for The Python Standard Library to get an idea
of whats available.  A wide variety of third-party extensions are also
available.  Consult the Python Package Index to
find packages of interest to you.
Python versions are numbered A.B.C or A.B:
A is the major version number  it is only incremented for really major
changes in the language.
B is the minor version number  it is incremented for less earth-shattering
changes.
C is the micro version number  it is incremented for each bugfix release.
Not all releases are bugfix releases.  In the run-up to a new feature release, a
series of development releases are made, denoted as alpha, beta, or release
candidate.  Alphas are early releases in which interfaces arent yet finalized;
its not unexpected to see an interface change between two alpha releases.
Betas are more stable, preserving existing interfaces but possibly adding new
modules, and release candidates are frozen, making no changes except as needed
to fix critical bugs.
Alpha, beta and release candidate versions have an additional suffix:
The suffix for an alpha version is aN for some small number N.
The suffix for a beta version is bN for some small number N.
The suffix for a release candidate version is rcN for some small number N.
In other words, all versions labeled 2.0aN precede the versions labeled
2.0bN, which precede versions labeled 2.0rcN, and those precede 2.0.
You may also find version numbers with a + suffix, e.g. 2.2+.  These are
unreleased versions, built directly from the CPython development repository.  In
practice, after a final minor release is made, the version is incremented to the
next minor version, which becomes the a0 version, e.g. 2.4a0.
See the Developers Guide
for more information about the development cycle, and
PEP 387 to learn more about Pythons backward compatibility policy.  See also
the documentation for sys.version, sys.hexversion, and
sys.version_info.
The latest Python source distribution is always available from python.org, at
https://www.python.org/downloads/.  The latest development sources can be obtained
at https://github.com/python/cpython/.
The source distribution is a gzipped tar file containing the complete C source,
Sphinx-formatted documentation, Python library modules, example programs, and
several useful pieces of freely distributable software.  The source will compile
and run out of the box on most UNIX platforms.
Consult the Getting Started section of the Python Developers Guide for more
information on getting the source code and compiling it.
The standard documentation for the current stable version of Python is available
at https://docs.python.org/3/.  PDF, plain text, and downloadable HTML versions are
also available at https://docs.python.org/3/download.html.
The documentation is written in reStructuredText and processed by the Sphinx
documentation tool.  The reStructuredText source for
the documentation is part of the Python source distribution.
There are numerous tutorials and books available.  The standard documentation
includes The Python Tutorial.
Consult the Beginners Guide to
find information for beginning Python programmers, including lists of tutorials.
There is a newsgroup, comp.lang.python, and a mailing list,
python-list.  The
newsgroup and mailing list are gatewayed into each other  if you can read news
its unnecessary to subscribe to the mailing list.
comp.lang.python is high-traffic, receiving hundreds of postings
every day, and Usenet readers are often more able to cope with this volume.
Announcements of new software releases and events can be found in
comp.lang.python.announce, a low-traffic moderated list that receives about five
postings per day.  Its available as the python-announce mailing list.
More info about other mailing lists and newsgroups
can be found at https://www.python.org/community/lists/.
Alpha and beta releases are available from https://www.python.org/downloads/.  All
releases are announced on the comp.lang.python and comp.lang.python.announce
newsgroups and on the Python home page at https://www.python.org/; an RSS feed of
news is available.
You can also access the development version of Python through Git.  See
The Python Developers Guide for details.
To report a bug or submit a patch, use the issue tracker at
https://github.com/python/cpython/issues.
For more information on how Python is developed, consult the Python Developers
Guide.
Its probably best to cite your favorite book about Python.
The very first article about Python was
written in 1991 and is now quite outdated.
Guido van Rossum and Jelke de Boer, Interactively Testing Remote Servers
Using the Python Programming Language, CWI Quarterly, Volume 4, Issue 4
(December 1991), Amsterdam, pp 283303.
Yes, there are many, and more are being published.  See the python.org wiki at
https://wiki.python.org/moin/PythonBooks for a list.
You can also search online bookstores for Python and filter out the Monty
Python references; or perhaps search for Python and language.
The Python projects infrastructure is located all over the world and is managed
by the Python Infrastructure Team. Details here.
When he began implementing Python, Guido van Rossum was also reading the
published scripts from Monty Pythons Flying Circus, a BBC comedy series from the 1970s.  Van Rossum
thought he needed a name that was short, unique, and slightly mysterious, so he
decided to call the language Python.
No, but it helps.  :)"
What is the Python Software Foundation?¶,"The Python Software Foundation is an independent non-profit organization that
holds the copyright on Python versions 2.1 and newer.  The PSFs mission is to
advance open source technology related to the Python programming language and to
publicize the use of Python.  The PSFs home page is at
https://www.python.org/psf/.
Donations to the PSF are tax-exempt in the US.  If you use Python and find it
helpful, please contribute via the PSF donation page."
Are there copyright restrictions on the use of Python?¶,"You can do anything you want with the source, as long as you leave the
copyrights in and display those copyrights in any documentation about Python
that you produce.  If you honor the copyright rules, its OK to use Python for
commercial use, to sell copies of Python in source or binary form (modified or
unmodified), or to sell products that incorporate Python in some form.  We would
still like to know about all commercial use of Python, of course.
See the license page to find further
explanations and the full text of the PSF License.
The Python logo is trademarked, and in certain cases permission is required to
use it.  Consult the Trademark Usage Policy for more information."
Why was Python created in the first place?¶,"Heres a very brief summary of what started it all, written by Guido van
Rossum:
I had extensive experience with implementing an interpreted language in the
ABC group at CWI, and from working with this group I had learned a lot about
language design.  This is the origin of many Python features, including the
use of indentation for statement grouping and the inclusion of
very-high-level data types (although the details are all different in
Python).
I had a number of gripes about the ABC language, but also liked many of its
features.  It was impossible to extend the ABC language (or its
implementation) to remedy my complaints  in fact its lack of extensibility
was one of its biggest problems.  I had some experience with using Modula-2+
and talked with the designers of Modula-3 and read the Modula-3 report.
Modula-3 is the origin of the syntax and semantics used for exceptions, and
some other Python features.
I was working in the Amoeba distributed operating system group at CWI.  We
needed a better way to do system administration than by writing either C
programs or Bourne shell scripts, since Amoeba had its own system call
interface which wasnt easily accessible from the Bourne shell.  My
experience with error handling in Amoeba made me acutely aware of the
importance of exceptions as a programming language feature.
It occurred to me that a scripting language with a syntax like ABC but with
access to the Amoeba system calls would fill the need.  I realized that it
would be foolish to write an Amoeba-specific language, so I decided that I
needed a language that was generally extensible.
During the 1989 Christmas holidays, I had a lot of time on my hand, so I
decided to give it a try.  During the next year, while still mostly working
on it in my own time, Python was used in the Amoeba project with increasing
success, and the feedback from colleagues made me add many early
improvements.
In February 1991, after just over a year of development, I decided to post to
USENET.  The rest is in the Misc/HISTORY file."
What is Python good for?¶,"Python is a high-level general-purpose programming language that can be applied
to many different classes of problems.
The language comes with a large standard library that covers areas such as
string processing (regular expressions, Unicode, calculating differences between
files), internet protocols (HTTP, FTP, SMTP, XML-RPC, POP, IMAP),
software engineering (unit testing, logging, profiling, parsing
Python code), and operating system interfaces (system calls, filesystems, TCP/IP
sockets).  Look at the table of contents for The Python Standard Library to get an idea
of whats available.  A wide variety of third-party extensions are also
available.  Consult the Python Package Index to
find packages of interest to you."
How does the Python version numbering scheme work?¶,"Python versions are numbered A.B.C or A.B:
A is the major version number  it is only incremented for really major
changes in the language.
B is the minor version number  it is incremented for less earth-shattering
changes.
C is the micro version number  it is incremented for each bugfix release.
Not all releases are bugfix releases.  In the run-up to a new feature release, a
series of development releases are made, denoted as alpha, beta, or release
candidate.  Alphas are early releases in which interfaces arent yet finalized;
its not unexpected to see an interface change between two alpha releases.
Betas are more stable, preserving existing interfaces but possibly adding new
modules, and release candidates are frozen, making no changes except as needed
to fix critical bugs.
Alpha, beta and release candidate versions have an additional suffix:
The suffix for an alpha version is aN for some small number N.
The suffix for a beta version is bN for some small number N.
The suffix for a release candidate version is rcN for some small number N.
In other words, all versions labeled 2.0aN precede the versions labeled
2.0bN, which precede versions labeled 2.0rcN, and those precede 2.0.
You may also find version numbers with a + suffix, e.g. 2.2+.  These are
unreleased versions, built directly from the CPython development repository.  In
practice, after a final minor release is made, the version is incremented to the
next minor version, which becomes the a0 version, e.g. 2.4a0.
See the Developers Guide
for more information about the development cycle, and
PEP 387 to learn more about Pythons backward compatibility policy.  See also
the documentation for sys.version, sys.hexversion, and
sys.version_info."
How do I obtain a copy of the Python source?¶,"The latest Python source distribution is always available from python.org, at
https://www.python.org/downloads/.  The latest development sources can be obtained
at https://github.com/python/cpython/.
The source distribution is a gzipped tar file containing the complete C source,
Sphinx-formatted documentation, Python library modules, example programs, and
several useful pieces of freely distributable software.  The source will compile
and run out of the box on most UNIX platforms.
Consult the Getting Started section of the Python Developers Guide for more
information on getting the source code and compiling it."
How do I get documentation on Python?¶,"The standard documentation for the current stable version of Python is available
at https://docs.python.org/3/.  PDF, plain text, and downloadable HTML versions are
also available at https://docs.python.org/3/download.html.
The documentation is written in reStructuredText and processed by the Sphinx
documentation tool.  The reStructuredText source for
the documentation is part of the Python source distribution."
Ive never programmed before. Is there a Python tutorial?¶,"There are numerous tutorials and books available.  The standard documentation
includes The Python Tutorial.
Consult the Beginners Guide to
find information for beginning Python programmers, including lists of tutorials."
Is there a newsgroup or mailing list devoted to Python?¶,"There is a newsgroup, comp.lang.python, and a mailing list,
python-list.  The
newsgroup and mailing list are gatewayed into each other  if you can read news
its unnecessary to subscribe to the mailing list.
comp.lang.python is high-traffic, receiving hundreds of postings
every day, and Usenet readers are often more able to cope with this volume.
Announcements of new software releases and events can be found in
comp.lang.python.announce, a low-traffic moderated list that receives about five
postings per day.  Its available as the python-announce mailing list.
More info about other mailing lists and newsgroups
can be found at https://www.python.org/community/lists/."
How do I get a beta test version of Python?¶,"Alpha and beta releases are available from https://www.python.org/downloads/.  All
releases are announced on the comp.lang.python and comp.lang.python.announce
newsgroups and on the Python home page at https://www.python.org/; an RSS feed of
news is available.
You can also access the development version of Python through Git.  See
The Python Developers Guide for details."
How do I submit bug reports and patches for Python?¶,"To report a bug or submit a patch, use the issue tracker at
https://github.com/python/cpython/issues.
For more information on how Python is developed, consult the Python Developers
Guide."
Are there any published articles about Python that I can reference?¶,"Its probably best to cite your favorite book about Python.
The very first article about Python was
written in 1991 and is now quite outdated.
Guido van Rossum and Jelke de Boer, Interactively Testing Remote Servers
Using the Python Programming Language, CWI Quarterly, Volume 4, Issue 4
(December 1991), Amsterdam, pp 283303."
Are there any books on Python?¶,"Yes, there are many, and more are being published.  See the python.org wiki at
https://wiki.python.org/moin/PythonBooks for a list.
You can also search online bookstores for Python and filter out the Monty
Python references; or perhaps search for Python and language."
Where in the world is www.python.org located?¶,"The Python projects infrastructure is located all over the world and is managed
by the Python Infrastructure Team. Details here."
Why is it called Python?¶,"When he began implementing Python, Guido van Rossum was also reading the
published scripts from Monty Pythons Flying Circus, a BBC comedy series from the 1970s.  Van Rossum
thought he needed a name that was short, unique, and slightly mysterious, so he
decided to call the language Python."
Do I have to like Monty Pythons Flying Circus?¶,"No, but it helps.  :)"
How stable is Python?¶,"Very stable.  New, stable releases have been coming out roughly every 6 to 18
months since 1991, and this seems likely to continue.  As of version 3.9,
Python will have a new feature release every 12 months (PEP 602).
The developers issue bugfix releases of older versions, so the stability of
existing releases gradually improves.  Bugfix releases, indicated by a third
component of the version number (e.g. 3.5.3, 3.6.2), are managed for stability;
only fixes for known problems are included in a bugfix release, and its
guaranteed that interfaces will remain the same throughout a series of bugfix
releases.
The latest stable releases can always be found on the Python download page.  There are two production-ready versions
of Python: 2.x and 3.x. The recommended version is 3.x, which is supported by
most widely used libraries.  Although 2.x is still widely used, it is not
maintained anymore.
There are probably millions of users, though its difficult to obtain an exact
count.
Python is available for free download, so there are no sales figures, and its
available from many different sites and packaged with many Linux distributions,
so download statistics dont tell the whole story either.
The comp.lang.python newsgroup is very active, but not all Python users post to
the group or even read it.
See https://www.python.org/about/success for a list of projects that use Python.
Consulting the proceedings for past Python conferences will reveal contributions from many
different companies and organizations.
High-profile Python projects include the Mailman mailing list manager and the Zope application server.  Several Linux distributions, most notably Red Hat, have written part or all of their installer and
system administration software in Python.  Companies that use Python internally
include Google, Yahoo, and Lucasfilm Ltd.
See https://peps.python.org/ for the Python Enhancement Proposals
(PEPs). PEPs are design documents describing a suggested new feature for Python,
providing a concise technical specification and a rationale.  Look for a PEP
titled Python X.Y Release Schedule, where X.Y is a version that hasnt been
publicly released yet.
New development is discussed on the python-dev mailing list.
In general, no.  There are already millions of lines of Python code around the
world, so any change in the language that invalidates more than a very small
fraction of existing programs has to be frowned upon.  Even if you can provide a
conversion program, theres still the problem of updating all documentation;
many books have been written about Python, and we dont want to invalidate them
all at a single stroke.
Providing a gradual upgrade path is necessary if a feature has to be changed.
PEP 5 describes the procedure followed for introducing backward-incompatible
changes while minimizing disruption for users.
Yes.
It is still common to start students with a procedural and statically typed
language such as Pascal, C, or a subset of C++ or Java.  Students may be better
served by learning Python as their first language.  Python has a very simple and
consistent syntax and a large standard library and, most importantly, using
Python in a beginning programming course lets students concentrate on important
programming skills such as problem decomposition and data type design.  With
Python, students can be quickly introduced to basic concepts such as loops and
procedures.  They can probably even work with user-defined objects in their very
first course.
For a student who has never programmed before, using a statically typed language
seems unnatural.  It presents additional complexity that the student must master
and slows the pace of the course.  The students are trying to learn to think
like a computer, decompose problems, design consistent interfaces, and
encapsulate data.  While learning to use a statically typed language is
important in the long term, it is not necessarily the best topic to address in
the students first programming course.
Many other aspects of Python make it a good first language.  Like Java, Python
has a large standard library so that students can be assigned programming
projects very early in the course that do something.  Assignments arent
restricted to the standard four-function calculator and check balancing
programs.  By using the standard library, students can gain the satisfaction of
working on realistic applications as they learn the fundamentals of programming.
Using the standard library also teaches students about code reuse.  Third-party
modules such as PyGame are also helpful in extending the students reach.
Pythons interactive interpreter enables students to test language features
while theyre programming.  They can keep a window with the interpreter running
while they enter their programs source in another window.  If they cant
remember the methods for a list, they can do something like this:
With the interpreter, documentation is never far from the student as they are
programming.
There are also good IDEs for Python.  IDLE is a cross-platform IDE for Python
that is written in Python using Tkinter.
Emacs users will be happy to know that there is a very good Python mode for
Emacs.  All of these programming environments provide syntax highlighting,
auto-indenting, and access to the interactive interpreter while coding.  Consult
the Python wiki for a full list
of Python editing environments.
If you want to discuss Pythons use in education, you may be interested in
joining the edu-sig mailing list."
How many people are using Python?¶,"There are probably millions of users, though its difficult to obtain an exact
count.
Python is available for free download, so there are no sales figures, and its
available from many different sites and packaged with many Linux distributions,
so download statistics dont tell the whole story either.
The comp.lang.python newsgroup is very active, but not all Python users post to
the group or even read it."
Have any significant projects been done in Python?¶,"See https://www.python.org/about/success for a list of projects that use Python.
Consulting the proceedings for past Python conferences will reveal contributions from many
different companies and organizations.
High-profile Python projects include the Mailman mailing list manager and the Zope application server.  Several Linux distributions, most notably Red Hat, have written part or all of their installer and
system administration software in Python.  Companies that use Python internally
include Google, Yahoo, and Lucasfilm Ltd."
What new developments are expected for Python in the future?¶,"See https://peps.python.org/ for the Python Enhancement Proposals
(PEPs). PEPs are design documents describing a suggested new feature for Python,
providing a concise technical specification and a rationale.  Look for a PEP
titled Python X.Y Release Schedule, where X.Y is a version that hasnt been
publicly released yet.
New development is discussed on the python-dev mailing list."
Is it reasonable to propose incompatible changes to Python?¶,"In general, no.  There are already millions of lines of Python code around the
world, so any change in the language that invalidates more than a very small
fraction of existing programs has to be frowned upon.  Even if you can provide a
conversion program, theres still the problem of updating all documentation;
many books have been written about Python, and we dont want to invalidate them
all at a single stroke.
Providing a gradual upgrade path is necessary if a feature has to be changed.
PEP 5 describes the procedure followed for introducing backward-incompatible
changes while minimizing disruption for users."
Is Python a good language for beginning programmers?¶,"Yes.
It is still common to start students with a procedural and statically typed
language such as Pascal, C, or a subset of C++ or Java.  Students may be better
served by learning Python as their first language.  Python has a very simple and
consistent syntax and a large standard library and, most importantly, using
Python in a beginning programming course lets students concentrate on important
programming skills such as problem decomposition and data type design.  With
Python, students can be quickly introduced to basic concepts such as loops and
procedures.  They can probably even work with user-defined objects in their very
first course.
For a student who has never programmed before, using a statically typed language
seems unnatural.  It presents additional complexity that the student must master
and slows the pace of the course.  The students are trying to learn to think
like a computer, decompose problems, design consistent interfaces, and
encapsulate data.  While learning to use a statically typed language is
important in the long term, it is not necessarily the best topic to address in
the students first programming course.
Many other aspects of Python make it a good first language.  Like Java, Python
has a large standard library so that students can be assigned programming
projects very early in the course that do something.  Assignments arent
restricted to the standard four-function calculator and check balancing
programs.  By using the standard library, students can gain the satisfaction of
working on realistic applications as they learn the fundamentals of programming.
Using the standard library also teaches students about code reuse.  Third-party
modules such as PyGame are also helpful in extending the students reach.
Pythons interactive interpreter enables students to test language features
while theyre programming.  They can keep a window with the interpreter running
while they enter their programs source in another window.  If they cant
remember the methods for a list, they can do something like this:
With the interpreter, documentation is never far from the student as they are
programming.
There are also good IDEs for Python.  IDLE is a cross-platform IDE for Python
that is written in Python using Tkinter.
Emacs users will be happy to know that there is a very good Python mode for
Emacs.  All of these programming environments provide syntax highlighting,
auto-indenting, and access to the interactive interpreter while coding.  Consult
the Python wiki for a full list
of Python editing environments.
If you want to discuss Pythons use in education, you may be interested in
joining the edu-sig mailing list."
"Is there a source code level debugger with breakpoints, single-stepping, etc.?¶","Yes.
Several debuggers for Python are described below, and the built-in function
breakpoint() allows you to drop into any of them.
The pdb module is a simple but adequate console-mode debugger for Python. It is
part of the standard Python library, and is documented in the Library
Reference Manual. You can also write your own debugger by using the code
for pdb as an example.
The IDLE interactive development environment, which is part of the standard
Python distribution (normally available as
Tools/scripts/idle3),
includes a graphical debugger.
PythonWin is a Python IDE that includes a GUI debugger based on pdb.  The
PythonWin debugger colors breakpoints and has quite a few cool features such as
debugging non-PythonWin programs.  PythonWin is available as part of
pywin32 project and
as a part of the
ActivePython distribution.
Eric is an IDE built on PyQt
and the Scintilla editing component.
trepan3k is a gdb-like debugger.
Visual Studio Code is an IDE with debugging
tools that integrates with version-control software.
There are a number of commercial Python IDEs that include graphical debuggers.
They include:
Wing IDE
Komodo IDE
PyCharm
Yes.
Pylint and
Pyflakes do basic checking that will
help you catch bugs sooner.
Static type checkers such as Mypy,
Pyre, and
Pytype can check type hints in Python
source code.
You dont need the ability to compile Python to C code if all you want is a
stand-alone program that users can download and run without having to install
the Python distribution first.  There are a number of tools that determine the
set of modules required by a program and bind these modules together with a
Python binary to produce a single executable.
One is to use the freeze tool, which is included in the Python source tree as
Tools/freeze.
It converts Python byte code to C arrays; with a C compiler you can
embed all your modules into a new program, which is then linked with the
standard Python modules.
It works by scanning your source recursively for import statements (in both
forms) and looking for the modules in the standard Python path as well as in the
source directory (for built-in modules).  It then turns the bytecode for modules
written in Python into C code (array initializers that can be turned into code
objects using the marshal module) and creates a custom-made config file that
only contains those built-in modules which are actually used in the program.  It
then compiles the generated C code and links it with the rest of the Python
interpreter to form a self-contained binary which acts exactly like your script.
The following packages can help with the creation of console and GUI
executables:
Nuitka (Cross-platform)
PyInstaller (Cross-platform)
PyOxidizer (Cross-platform)
cx_Freeze (Cross-platform)
py2app (macOS only)
py2exe (Windows only)
Yes.  The coding style required for standard library modules is documented as
PEP 8."
Are there tools to help find bugs or perform static analysis?¶,"Yes.
Pylint and
Pyflakes do basic checking that will
help you catch bugs sooner.
Static type checkers such as Mypy,
Pyre, and
Pytype can check type hints in Python
source code."
How can I create a stand-alone binary from a Python script?¶,"You dont need the ability to compile Python to C code if all you want is a
stand-alone program that users can download and run without having to install
the Python distribution first.  There are a number of tools that determine the
set of modules required by a program and bind these modules together with a
Python binary to produce a single executable.
One is to use the freeze tool, which is included in the Python source tree as
Tools/freeze.
It converts Python byte code to C arrays; with a C compiler you can
embed all your modules into a new program, which is then linked with the
standard Python modules.
It works by scanning your source recursively for import statements (in both
forms) and looking for the modules in the standard Python path as well as in the
source directory (for built-in modules).  It then turns the bytecode for modules
written in Python into C code (array initializers that can be turned into code
objects using the marshal module) and creates a custom-made config file that
only contains those built-in modules which are actually used in the program.  It
then compiles the generated C code and links it with the rest of the Python
interpreter to form a self-contained binary which acts exactly like your script.
The following packages can help with the creation of console and GUI
executables:
Nuitka (Cross-platform)
PyInstaller (Cross-platform)
PyOxidizer (Cross-platform)
cx_Freeze (Cross-platform)
py2app (macOS only)
py2exe (Windows only)"
Are there coding standards or a style guide for Python programs?¶,"Yes.  The coding style required for standard library modules is documented as
PEP 8."
Why am I getting an UnboundLocalError when the variable has a value?¶,"It can be a surprise to get the UnboundLocalError in previously working
code when it is modified by adding an assignment statement somewhere in
the body of a function.
This code:
works, but this code:
results in an UnboundLocalError:
This is because when you make an assignment to a variable in a scope, that
variable becomes local to that scope and shadows any similarly named variable
in the outer scope.  Since the last statement in foo assigns a new value to
x, the compiler recognizes it as a local variable.  Consequently when the
earlier print(x) attempts to print the uninitialized local variable and
an error results.
In the example above you can access the outer scope variable by declaring it
global:
This explicit declaration is required in order to remind you that (unlike the
superficially analogous situation with class and instance variables) you are
actually modifying the value of the variable in the outer scope:
You can do a similar thing in a nested scope using the nonlocal
keyword:
In Python, variables that are only referenced inside a function are implicitly
global.  If a variable is assigned a value anywhere within the functions body,
its assumed to be a local unless explicitly declared as global.
Though a bit surprising at first, a moments consideration explains this.  On
one hand, requiring global for assigned variables provides a bar
against unintended side-effects.  On the other hand, if global was required
for all global references, youd be using global all the time.  Youd have
to declare as global every reference to a built-in function or to a component of
an imported module.  This clutter would defeat the usefulness of the global
declaration for identifying side-effects.
Assume you use a for loop to define a few different lambdas (or even plain
functions), e.g.:
This gives you a list that contains 5 lambdas that calculate x**2.  You
might expect that, when called, they would return, respectively, 0, 1,
4, 9, and 16.  However, when you actually try you will see that
they all return 16:
This happens because x is not local to the lambdas, but is defined in
the outer scope, and it is accessed when the lambda is called  not when it
is defined.  At the end of the loop, the value of x is 4, so all the
functions now return 4**2, i.e. 16.  You can also verify this by
changing the value of x and see how the results of the lambdas change:
In order to avoid this, you need to save the values in variables local to the
lambdas, so that they dont rely on the value of the global x:
Here, n=x creates a new variable n local to the lambda and computed
when the lambda is defined so that it has the same value that x had at
that point in the loop.  This means that the value of n will be 0
in the first lambda, 1 in the second, 2 in the third, and so on.
Therefore each lambda will now return the correct result:
Note that this behaviour is not peculiar to lambdas, but applies to regular
functions too.
The canonical way to share information across modules within a single program is
to create a special module (often called config or cfg).  Just import the config
module in all modules of your application; the module then becomes available as
a global name.  Because there is only one instance of each module, any changes
made to the module object get reflected everywhere.  For example:
config.py:
mod.py:
main.py:
Note that using a module is also the basis for implementing the singleton design
pattern, for the same reason.
In general, dont use from modulename import *.  Doing so clutters the
importers namespace, and makes it much harder for linters to detect undefined
names.
Import modules at the top of a file.  Doing so makes it clear what other modules
your code requires and avoids questions of whether the module name is in scope.
Using one import per line makes it easy to add and delete module imports, but
using multiple imports per line uses less screen space.
Its good practice if you import modules in the following order:
standard library modules  e.g. sys, os, argparse, re
third-party library modules (anything installed in Pythons site-packages
directory)  e.g. dateutil, requests, PIL.Image
locally developed modules
It is sometimes necessary to move imports to a function or class to avoid
problems with circular imports.  Gordon McMillan says:
Circular imports are fine where both modules use the import <module> form
of import.  They fail when the 2nd module wants to grab a name out of the
first (from module import name) and the import is at the top level.  Thats
because names in the 1st are not yet available, because the first module is
busy importing the 2nd.
In this case, if the second module is only used in one function, then the import
can easily be moved into that function.  By the time the import is called, the
first module will have finished initializing, and the second module can do its
import.
It may also be necessary to move imports out of the top level of code if some of
the modules are platform-specific.  In that case, it may not even be possible to
import all of the modules at the top of the file.  In this case, importing the
correct modules in the corresponding platform-specific code is a good option.
Only move imports into a local scope, such as inside a function definition, if
its necessary to solve a problem such as avoiding a circular import or are
trying to reduce the initialization time of a module.  This technique is
especially helpful if many of the imports are unnecessary depending on how the
program executes.  You may also want to move imports into a function if the
modules are only ever used in that function.  Note that loading a module the
first time may be expensive because of the one time initialization of the
module, but loading a module multiple times is virtually free, costing only a
couple of dictionary lookups.  Even if the module name has gone out of scope,
the module is probably available in sys.modules.
This type of bug commonly bites neophyte programmers.  Consider this function:
The first time you call this function, mydict contains a single item.  The
second time, mydict contains two items because when foo() begins
executing, mydict starts out with an item already in it.
It is often expected that a function call creates new objects for default
values. This is not what happens. Default values are created exactly once, when
the function is defined.  If that object is changed, like the dictionary in this
example, subsequent calls to the function will refer to this changed object.
By definition, immutable objects such as numbers, strings, tuples, and None,
are safe from change. Changes to mutable objects such as dictionaries, lists,
and class instances can lead to confusion.
Because of this feature, it is good programming practice to not use mutable
objects as default values.  Instead, use None as the default value and
inside the function, check if the parameter is None and create a new
list/dictionary/whatever if it is.  For example, dont write:
but:
This feature can be useful.  When you have a function thats time-consuming to
compute, a common technique is to cache the parameters and the resulting value
of each call to the function, and return the cached value if the same value is
requested again.  This is called memoizing, and can be implemented like this:
You could use a global variable containing a dictionary instead of the default
value; its a matter of taste.
Collect the arguments using the * and ** specifiers in the functions
parameter list; this gives you the positional arguments as a tuple and the
keyword arguments as a dictionary.  You can then pass these arguments when
calling another function by using * and **:
Parameters are defined by the names that appear in a
function definition, whereas arguments are the values
actually passed to a function when calling it.  Parameters define what
kind of arguments a function can accept.  For
example, given the function definition:
foo, bar and kwargs are parameters of func.  However, when calling
func, for example:
the values 42, 314, and somevar are arguments.
If you wrote code like:
you might be wondering why appending an element to y changed x too.
There are two factors that produce this result:
Variables are simply names that refer to objects.  Doing y = x doesnt
create a copy of the list  it creates a new variable y that refers to
the same object x refers to.  This means that there is only one object
(the list), and both x and y refer to it.
Lists are mutable, which means that you can change their content.
After the call to append(), the content of the mutable object has
changed from [] to [10].  Since both the variables refer to the same
object, using either name accesses the modified value [10].
If we instead assign an immutable object to x:
we can see that in this case x and y are not equal anymore.  This is
because integers are immutable, and when we do x = x + 1 we are not
mutating the int 5 by incrementing its value; instead, we are creating a
new object (the int 6) and assigning it to x (that is, changing which
object x refers to).  After this assignment we have two objects (the ints
6 and 5) and two variables that refer to them (x now refers to
6 but y still refers to 5).
Some operations (for example y.append(10) and y.sort()) mutate the
object, whereas superficially similar operations (for example y = y + [10]
and sorted(y)) create a new object.  In general in Python (and in all cases
in the standard library) a method that mutates an object will return None
to help avoid getting the two types of operations confused.  So if you
mistakenly write y.sort() thinking it will give you a sorted copy of y,
youll instead end up with None, which will likely cause your program to
generate an easily diagnosed error.
However, there is one class of operations where the same operation sometimes
has different behaviors with different types:  the augmented assignment
operators.  For example, += mutates lists but not tuples or ints (a_list
+= [1, 2, 3] is equivalent to a_list.extend([1, 2, 3]) and mutates
a_list, whereas some_tuple += (1, 2, 3) and some_int += 1 create
new objects).
In other words:
If we have a mutable object (list, dict, set,
etc.), we can use some specific operations to mutate it and all the variables
that refer to it will see the change.
If we have an immutable object (str, int, tuple,
etc.), all the variables that refer to it will always see the same value,
but operations that transform that value into a new value always return a new
object.
If you want to know if two variables refer to the same object or not, you can
use the is operator, or the built-in function id().
Remember that arguments are passed by assignment in Python.  Since assignment
just creates references to objects, theres no alias between an argument name in
the caller and callee, and so no call-by-reference per se.  You can achieve the
desired effect in a number of ways.
By returning a tuple of the results:
This is almost always the clearest solution.
By using global variables.  This isnt thread-safe, and is not recommended.
By passing a mutable (changeable in-place) object:
By passing in a dictionary that gets mutated:
Or bundle up values in a class instance:
Theres almost never a good reason to get this complicated.
Your best choice is to return a tuple containing the multiple results.
You have two choices: you can use nested scopes or you can use callable objects.
For example, suppose you wanted to define linear(a,b) which returns a
function f(x) that computes the value a*x+b.  Using nested scopes:
Or using a callable object:
In both cases,
gives a callable object where taxes(10e6) == 0.3 * 10e6 + 2.
The callable object approach has the disadvantage that it is a bit slower and
results in slightly longer code.  However, note that a collection of callables
can share their signature via inheritance:
Object can encapsulate state for several methods:
Here inc(), dec() and reset() act like functions which share the
same counting variable.
In general, try copy.copy() or copy.deepcopy() for the general case.
Not all objects can be copied, but most can.
Some objects can be copied more easily.  Dictionaries have a copy()
method:
Sequences can be copied by slicing:
For an instance x of a user-defined class, dir(x) returns an alphabetized
list of the names containing the instance attributes and methods and attributes
defined by its class.
Generally speaking, it cant, because objects dont really have names.
Essentially, assignment always binds a name to a value; the same is true of
def and class statements, but in that case the value is a
callable. Consider the following code:
Arguably the class has a name: even though it is bound to two names and invoked
through the name B the created instance is still reported as an instance of
class A.  However, it is impossible to say whether the instances name is a or
b, since both names are bound to the same value.
Generally speaking it should not be necessary for your code to know the names
of particular values. Unless you are deliberately writing introspective
programs, this is usually an indication that a change of approach might be
beneficial.
In comp.lang.python, Fredrik Lundh once gave an excellent analogy in answer to
this question:
The same way as you get the name of that cat you found on your porch: the cat
(object) itself cannot tell you its name, and it doesnt really care  so
the only way to find out what its called is to ask all your neighbours
(namespaces) if its their cat (object)
.and dont be surprised if youll find that its known by many names, or
no name at all!
Comma is not an operator in Python.  Consider this session:
Since the comma is not an operator, but a separator between expressions the
above is evaluated as if you had entered:
not:
The same is true of the various assignment operators (=, += etc).  They
are not truly operators but syntactic delimiters in assignment statements.
Yes, there is. The syntax is as follows:
Before this syntax was introduced in Python 2.5, a common idiom was to use
logical operators:
However, this idiom is unsafe, as it can give wrong results when on_true
has a false boolean value.  Therefore, it is always better to use
the ... if ... else ... form.
Yes.  Usually this is done by nesting lambda within
lambda.  See the following three examples, slightly adapted from Ulf Bartelt:
Dont try this at home, kids!
A slash in the argument list of a function denotes that the parameters prior to
it are positional-only.  Positional-only parameters are the ones without an
externally usable name.  Upon calling a function that accepts positional-only
parameters, arguments are mapped to parameters based solely on their position.
For example, divmod() is a function that accepts positional-only
parameters. Its documentation looks like this:
The slash at the end of the parameter list means that both parameters are
positional-only. Thus, calling divmod() with keyword arguments would lead
to an error:"
What are the rules for local and global variables in Python?¶,"In Python, variables that are only referenced inside a function are implicitly
global.  If a variable is assigned a value anywhere within the functions body,
its assumed to be a local unless explicitly declared as global.
Though a bit surprising at first, a moments consideration explains this.  On
one hand, requiring global for assigned variables provides a bar
against unintended side-effects.  On the other hand, if global was required
for all global references, youd be using global all the time.  Youd have
to declare as global every reference to a built-in function or to a component of
an imported module.  This clutter would defeat the usefulness of the global
declaration for identifying side-effects."
Why do lambdas defined in a loop with different values all return the same result?¶,"Assume you use a for loop to define a few different lambdas (or even plain
functions), e.g.:
This gives you a list that contains 5 lambdas that calculate x**2.  You
might expect that, when called, they would return, respectively, 0, 1,
4, 9, and 16.  However, when you actually try you will see that
they all return 16:
This happens because x is not local to the lambdas, but is defined in
the outer scope, and it is accessed when the lambda is called  not when it
is defined.  At the end of the loop, the value of x is 4, so all the
functions now return 4**2, i.e. 16.  You can also verify this by
changing the value of x and see how the results of the lambdas change:
In order to avoid this, you need to save the values in variables local to the
lambdas, so that they dont rely on the value of the global x:
Here, n=x creates a new variable n local to the lambda and computed
when the lambda is defined so that it has the same value that x had at
that point in the loop.  This means that the value of n will be 0
in the first lambda, 1 in the second, 2 in the third, and so on.
Therefore each lambda will now return the correct result:
Note that this behaviour is not peculiar to lambdas, but applies to regular
functions too."
How do I share global variables across modules?¶,"The canonical way to share information across modules within a single program is
to create a special module (often called config or cfg).  Just import the config
module in all modules of your application; the module then becomes available as
a global name.  Because there is only one instance of each module, any changes
made to the module object get reflected everywhere.  For example:
config.py:
mod.py:
main.py:
Note that using a module is also the basis for implementing the singleton design
pattern, for the same reason."
What are the best practices for using import in a module?¶,"In general, dont use from modulename import *.  Doing so clutters the
importers namespace, and makes it much harder for linters to detect undefined
names.
Import modules at the top of a file.  Doing so makes it clear what other modules
your code requires and avoids questions of whether the module name is in scope.
Using one import per line makes it easy to add and delete module imports, but
using multiple imports per line uses less screen space.
Its good practice if you import modules in the following order:
standard library modules  e.g. sys, os, argparse, re
third-party library modules (anything installed in Pythons site-packages
directory)  e.g. dateutil, requests, PIL.Image
locally developed modules
It is sometimes necessary to move imports to a function or class to avoid
problems with circular imports.  Gordon McMillan says:
Circular imports are fine where both modules use the import <module> form
of import.  They fail when the 2nd module wants to grab a name out of the
first (from module import name) and the import is at the top level.  Thats
because names in the 1st are not yet available, because the first module is
busy importing the 2nd.
In this case, if the second module is only used in one function, then the import
can easily be moved into that function.  By the time the import is called, the
first module will have finished initializing, and the second module can do its
import.
It may also be necessary to move imports out of the top level of code if some of
the modules are platform-specific.  In that case, it may not even be possible to
import all of the modules at the top of the file.  In this case, importing the
correct modules in the corresponding platform-specific code is a good option.
Only move imports into a local scope, such as inside a function definition, if
its necessary to solve a problem such as avoiding a circular import or are
trying to reduce the initialization time of a module.  This technique is
especially helpful if many of the imports are unnecessary depending on how the
program executes.  You may also want to move imports into a function if the
modules are only ever used in that function.  Note that loading a module the
first time may be expensive because of the one time initialization of the
module, but loading a module multiple times is virtually free, costing only a
couple of dictionary lookups.  Even if the module name has gone out of scope,
the module is probably available in sys.modules."
Why are default values shared between objects?¶,"This type of bug commonly bites neophyte programmers.  Consider this function:
The first time you call this function, mydict contains a single item.  The
second time, mydict contains two items because when foo() begins
executing, mydict starts out with an item already in it.
It is often expected that a function call creates new objects for default
values. This is not what happens. Default values are created exactly once, when
the function is defined.  If that object is changed, like the dictionary in this
example, subsequent calls to the function will refer to this changed object.
By definition, immutable objects such as numbers, strings, tuples, and None,
are safe from change. Changes to mutable objects such as dictionaries, lists,
and class instances can lead to confusion.
Because of this feature, it is good programming practice to not use mutable
objects as default values.  Instead, use None as the default value and
inside the function, check if the parameter is None and create a new
list/dictionary/whatever if it is.  For example, dont write:
but:
This feature can be useful.  When you have a function thats time-consuming to
compute, a common technique is to cache the parameters and the resulting value
of each call to the function, and return the cached value if the same value is
requested again.  This is called memoizing, and can be implemented like this:
You could use a global variable containing a dictionary instead of the default
value; its a matter of taste."
How can I pass optional or keyword parameters from one function to another?¶,"Collect the arguments using the * and ** specifiers in the functions
parameter list; this gives you the positional arguments as a tuple and the
keyword arguments as a dictionary.  You can then pass these arguments when
calling another function by using * and **:"
What is the difference between arguments and parameters?¶,"Parameters are defined by the names that appear in a
function definition, whereas arguments are the values
actually passed to a function when calling it.  Parameters define what
kind of arguments a function can accept.  For
example, given the function definition:
foo, bar and kwargs are parameters of func.  However, when calling
func, for example:
the values 42, 314, and somevar are arguments."
Why did changing list y also change list x?¶,"If you wrote code like:
you might be wondering why appending an element to y changed x too.
There are two factors that produce this result:
Variables are simply names that refer to objects.  Doing y = x doesnt
create a copy of the list  it creates a new variable y that refers to
the same object x refers to.  This means that there is only one object
(the list), and both x and y refer to it.
Lists are mutable, which means that you can change their content.
After the call to append(), the content of the mutable object has
changed from [] to [10].  Since both the variables refer to the same
object, using either name accesses the modified value [10].
If we instead assign an immutable object to x:
we can see that in this case x and y are not equal anymore.  This is
because integers are immutable, and when we do x = x + 1 we are not
mutating the int 5 by incrementing its value; instead, we are creating a
new object (the int 6) and assigning it to x (that is, changing which
object x refers to).  After this assignment we have two objects (the ints
6 and 5) and two variables that refer to them (x now refers to
6 but y still refers to 5).
Some operations (for example y.append(10) and y.sort()) mutate the
object, whereas superficially similar operations (for example y = y + [10]
and sorted(y)) create a new object.  In general in Python (and in all cases
in the standard library) a method that mutates an object will return None
to help avoid getting the two types of operations confused.  So if you
mistakenly write y.sort() thinking it will give you a sorted copy of y,
youll instead end up with None, which will likely cause your program to
generate an easily diagnosed error.
However, there is one class of operations where the same operation sometimes
has different behaviors with different types:  the augmented assignment
operators.  For example, += mutates lists but not tuples or ints (a_list
+= [1, 2, 3] is equivalent to a_list.extend([1, 2, 3]) and mutates
a_list, whereas some_tuple += (1, 2, 3) and some_int += 1 create
new objects).
In other words:
If we have a mutable object (list, dict, set,
etc.), we can use some specific operations to mutate it and all the variables
that refer to it will see the change.
If we have an immutable object (str, int, tuple,
etc.), all the variables that refer to it will always see the same value,
but operations that transform that value into a new value always return a new
object.
If you want to know if two variables refer to the same object or not, you can
use the is operator, or the built-in function id()."
How do I write a function with output parameters (call by reference)?¶,"Remember that arguments are passed by assignment in Python.  Since assignment
just creates references to objects, theres no alias between an argument name in
the caller and callee, and so no call-by-reference per se.  You can achieve the
desired effect in a number of ways.
By returning a tuple of the results:
This is almost always the clearest solution.
By using global variables.  This isnt thread-safe, and is not recommended.
By passing a mutable (changeable in-place) object:
By passing in a dictionary that gets mutated:
Or bundle up values in a class instance:
Theres almost never a good reason to get this complicated.
Your best choice is to return a tuple containing the multiple results."
How do you make a higher order function in Python?¶,"You have two choices: you can use nested scopes or you can use callable objects.
For example, suppose you wanted to define linear(a,b) which returns a
function f(x) that computes the value a*x+b.  Using nested scopes:
Or using a callable object:
In both cases,
gives a callable object where taxes(10e6) == 0.3 * 10e6 + 2.
The callable object approach has the disadvantage that it is a bit slower and
results in slightly longer code.  However, note that a collection of callables
can share their signature via inheritance:
Object can encapsulate state for several methods:
Here inc(), dec() and reset() act like functions which share the
same counting variable."
How do I copy an object in Python?¶,"In general, try copy.copy() or copy.deepcopy() for the general case.
Not all objects can be copied, but most can.
Some objects can be copied more easily.  Dictionaries have a copy()
method:
Sequences can be copied by slicing:"
How can I find the methods or attributes of an object?¶,"For an instance x of a user-defined class, dir(x) returns an alphabetized
list of the names containing the instance attributes and methods and attributes
defined by its class."
How can my code discover the name of an object?¶,"Generally speaking, it cant, because objects dont really have names.
Essentially, assignment always binds a name to a value; the same is true of
def and class statements, but in that case the value is a
callable. Consider the following code:
Arguably the class has a name: even though it is bound to two names and invoked
through the name B the created instance is still reported as an instance of
class A.  However, it is impossible to say whether the instances name is a or
b, since both names are bound to the same value.
Generally speaking it should not be necessary for your code to know the names
of particular values. Unless you are deliberately writing introspective
programs, this is usually an indication that a change of approach might be
beneficial.
In comp.lang.python, Fredrik Lundh once gave an excellent analogy in answer to
this question:
The same way as you get the name of that cat you found on your porch: the cat
(object) itself cannot tell you its name, and it doesnt really care  so
the only way to find out what its called is to ask all your neighbours
(namespaces) if its their cat (object)
.and dont be surprised if youll find that its known by many names, or
no name at all!"
Whats up with the comma operators precedence?¶,"Comma is not an operator in Python.  Consider this session:
Since the comma is not an operator, but a separator between expressions the
above is evaluated as if you had entered:
not:
The same is true of the various assignment operators (=, += etc).  They
are not truly operators but syntactic delimiters in assignment statements."
Is there an equivalent of Cs ?: ternary operator?¶,"Yes, there is. The syntax is as follows:
Before this syntax was introduced in Python 2.5, a common idiom was to use
logical operators:
However, this idiom is unsafe, as it can give wrong results when on_true
has a false boolean value.  Therefore, it is always better to use
the ... if ... else ... form."
Is it possible to write obfuscated one-liners in Python?¶,"Yes.  Usually this is done by nesting lambda within
lambda.  See the following three examples, slightly adapted from Ulf Bartelt:
Dont try this at home, kids!"
What does the slash(/) in the parameter list of a function mean?¶,"A slash in the argument list of a function denotes that the parameters prior to
it are positional-only.  Positional-only parameters are the ones without an
externally usable name.  Upon calling a function that accepts positional-only
parameters, arguments are mapped to parameters based solely on their position.
For example, divmod() is a function that accepts positional-only
parameters. Its documentation looks like this:
The slash at the end of the parameter list means that both parameters are
positional-only. Thus, calling divmod() with keyword arguments would lead
to an error:"
How do I specify hexadecimal and octal integers?¶,"To specify an octal digit, precede the octal value with a zero, and then a lower
or uppercase o.  For example, to set the variable a to the octal value 10
(8 in decimal), type:
Hexadecimal is just as easy.  Simply precede the hexadecimal number with a zero,
and then a lower or uppercase x.  Hexadecimal digits can be specified in lower
or uppercase.  For example, in the Python interpreter:
Its primarily driven by the desire that i % j have the same sign as j.
If you want that, and also want:
then integer division has to return the floor.  C also requires that identity to
hold, and then compilers that truncate i // j need to make i % j have
the same sign as i.
There are few real use cases for i % j when j is negative.  When j
is positive, there are many, and in virtually all of them its more useful for
i % j to be >= 0.  If the clock says 10 now, what did it say 200 hours
ago?  -190 % 12 == 2 is useful; -190 % 12 == -10 is a bug waiting to
bite.
Trying to lookup an int literal attribute in the normal manner gives
a SyntaxError because the period is seen as a decimal point:
The solution is to separate the literal from the period
with either a space or parentheses.
For integers, use the built-in int() type constructor, e.g. int('144')
== 144.  Similarly, float() converts to floating-point,
e.g. float('144') == 144.0.
By default, these interpret the number as decimal, so that int('0144') ==
144 holds true, and int('0x144') raises ValueError. int(string,
base) takes the base to convert from as a second optional argument, so int(
'0x144', 16) == 324.  If the base is specified as 0, the number is interpreted
using Pythons rules: a leading 0o indicates octal, and 0x indicates a hex
number.
Do not use the built-in function eval() if all you need is to convert
strings to numbers.  eval() will be significantly slower and it presents a
security risk: someone could pass you a Python expression that might have
unwanted side effects.  For example, someone could pass
__import__('os').system(""rm -rf $HOME"") which would erase your home
directory.
eval() also has the effect of interpreting numbers as Python expressions,
so that e.g. eval('09') gives a syntax error because Python does not allow
leading 0 in a decimal number (except 0).
To convert, e.g., the number 144 to the string '144', use the built-in type
constructor str().  If you want a hexadecimal or octal representation, use
the built-in functions hex() or oct().  For fancy formatting, see
the f-strings and Format String Syntax sections,
e.g. ""{:04d}"".format(144) yields
'0144' and ""{:.3f}"".format(1.0/3.0) yields '0.333'.
You cant, because strings are immutable.  In most situations, you should
simply construct a new string from the various parts you want to assemble
it from.  However, if you need an object with the ability to modify in-place
unicode data, try using an io.StringIO object or the array
module:
There are various techniques.
The best is to use a dictionary that maps strings to functions.  The primary
advantage of this technique is that the strings do not need to match the names
of the functions.  This is also the primary technique used to emulate a case
construct:
Use the built-in function getattr():
Note that getattr() works on any object, including classes, class
instances, modules, and so on.
This is used in several places in the standard library, like this:
Use locals() to resolve the function name:
You can use S.rstrip(""\r\n"") to remove all occurrences of any line
terminator from the end of the string S without removing other trailing
whitespace.  If the string S represents more than one line, with several
empty lines at the end, the line terminators for all the blank lines will
be removed:
Since this is typically only desired when reading text one line at a time, using
S.rstrip() this way works well.
Not as such.
For simple input parsing, the easiest approach is usually to split the line into
whitespace-delimited words using the split() method of string objects
and then convert decimal strings to numeric values using int() or
float().  split() supports an optional sep parameter which is useful
if the line uses something other than whitespace as a separator.
For more complicated input parsing, regular expressions are more powerful
than Cs sscanf and better suited for the task.
See the Unicode HOWTO.
A raw string ending with an odd number of backslashes will escape the strings quote:
There are several workarounds for this. One is to use regular strings and double
the backslashes:
Another is to concatenate a regular string containing an escaped backslash to the
raw string:
It is also possible to use os.path.join() to append a backslash on Windows:
Note that while a backslash will escape a quote for the purposes of
determining where the raw string ends, no escaping occurs when interpreting the
value of the raw string. That is, the backslash remains present in the value of
the raw string:
Also see the specification in the language reference."
Why does -22 // 10 return -3?¶,"Its primarily driven by the desire that i % j have the same sign as j.
If you want that, and also want:
then integer division has to return the floor.  C also requires that identity to
hold, and then compilers that truncate i // j need to make i % j have
the same sign as i.
There are few real use cases for i % j when j is negative.  When j
is positive, there are many, and in virtually all of them its more useful for
i % j to be >= 0.  If the clock says 10 now, what did it say 200 hours
ago?  -190 % 12 == 2 is useful; -190 % 12 == -10 is a bug waiting to
bite."
How do I get int literal attribute instead of SyntaxError?¶,"Trying to lookup an int literal attribute in the normal manner gives
a SyntaxError because the period is seen as a decimal point:
The solution is to separate the literal from the period
with either a space or parentheses."
How do I convert a string to a number?¶,"For integers, use the built-in int() type constructor, e.g. int('144')
== 144.  Similarly, float() converts to floating-point,
e.g. float('144') == 144.0.
By default, these interpret the number as decimal, so that int('0144') ==
144 holds true, and int('0x144') raises ValueError. int(string,
base) takes the base to convert from as a second optional argument, so int(
'0x144', 16) == 324.  If the base is specified as 0, the number is interpreted
using Pythons rules: a leading 0o indicates octal, and 0x indicates a hex
number.
Do not use the built-in function eval() if all you need is to convert
strings to numbers.  eval() will be significantly slower and it presents a
security risk: someone could pass you a Python expression that might have
unwanted side effects.  For example, someone could pass
__import__('os').system(""rm -rf $HOME"") which would erase your home
directory.
eval() also has the effect of interpreting numbers as Python expressions,
so that e.g. eval('09') gives a syntax error because Python does not allow
leading 0 in a decimal number (except 0)."
How do I convert a number to a string?¶,"To convert, e.g., the number 144 to the string '144', use the built-in type
constructor str().  If you want a hexadecimal or octal representation, use
the built-in functions hex() or oct().  For fancy formatting, see
the f-strings and Format String Syntax sections,
e.g. ""{:04d}"".format(144) yields
'0144' and ""{:.3f}"".format(1.0/3.0) yields '0.333'."
How do I modify a string in place?¶,"You cant, because strings are immutable.  In most situations, you should
simply construct a new string from the various parts you want to assemble
it from.  However, if you need an object with the ability to modify in-place
unicode data, try using an io.StringIO object or the array
module:"
How do I use strings to call functions/methods?¶,"There are various techniques.
The best is to use a dictionary that maps strings to functions.  The primary
advantage of this technique is that the strings do not need to match the names
of the functions.  This is also the primary technique used to emulate a case
construct:
Use the built-in function getattr():
Note that getattr() works on any object, including classes, class
instances, modules, and so on.
This is used in several places in the standard library, like this:
Use locals() to resolve the function name:"
Is there an equivalent to Perls chomp() for removing trailing newlines from strings?¶,"You can use S.rstrip(""\r\n"") to remove all occurrences of any line
terminator from the end of the string S without removing other trailing
whitespace.  If the string S represents more than one line, with several
empty lines at the end, the line terminators for all the blank lines will
be removed:
Since this is typically only desired when reading text one line at a time, using
S.rstrip() this way works well."
Is there a scanf() or sscanf() equivalent?¶,"Not as such.
For simple input parsing, the easiest approach is usually to split the line into
whitespace-delimited words using the split() method of string objects
and then convert decimal strings to numeric values using int() or
float().  split() supports an optional sep parameter which is useful
if the line uses something other than whitespace as a separator.
For more complicated input parsing, regular expressions are more powerful
than Cs sscanf and better suited for the task."
What does UnicodeDecodeError or UnicodeEncodeError error  mean?¶,See the Unicode HOWTO.
Can I end a raw string with an odd number of backslashes?¶,"A raw string ending with an odd number of backslashes will escape the strings quote:
There are several workarounds for this. One is to use regular strings and double
the backslashes:
Another is to concatenate a regular string containing an escaped backslash to the
raw string:
It is also possible to use os.path.join() to append a backslash on Windows:
Note that while a backslash will escape a quote for the purposes of
determining where the raw string ends, no escaping occurs when interpreting the
value of the raw string. That is, the backslash remains present in the value of
the raw string:
Also see the specification in the language reference."
My program is too slow. How do I speed it up?¶,"Thats a tough one, in general.  First, here are a list of things to
remember before diving further:
Performance characteristics vary across Python implementations.  This FAQ
focuses on CPython.
Behaviour can vary across operating systems, especially when talking about
I/O or multi-threading.
You should always find the hot spots in your program before attempting to
optimize any code (see the profile module).
Writing benchmark scripts will allow you to iterate quickly when searching
for improvements (see the timeit module).
It is highly recommended to have good code coverage (through unit testing
or any other technique) before potentially introducing regressions hidden
in sophisticated optimizations.
That being said, there are many tricks to speed up Python code.  Here are
some general principles which go a long way towards reaching acceptable
performance levels:
Making your algorithms faster (or changing to faster ones) can yield
much larger benefits than trying to sprinkle micro-optimization tricks
all over your code.
Use the right data structures.  Study documentation for the Built-in Types
and the collections module.
When the standard library provides a primitive for doing something, it is
likely (although not guaranteed) to be faster than any alternative you
may come up with.  This is doubly true for primitives written in C, such
as builtins and some extension types.  For example, be sure to use
either the list.sort() built-in method or the related sorted()
function to do sorting (and see the Sorting Techniques for examples
of moderately advanced usage).
Abstractions tend to create indirections and force the interpreter to work
more.  If the levels of indirection outweigh the amount of useful work
done, your program will be slower.  You should avoid excessive abstraction,
especially under the form of tiny functions or methods (which are also often
detrimental to readability).
If you have reached the limit of what pure Python can allow, there are tools
to take you further away.  For example, Cython can
compile a slightly modified version of Python code into a C extension, and
can be used on many different platforms.  Cython can take advantage of
compilation (and optional type annotations) to make your code significantly
faster than when interpreted.  If you are confident in your C programming
skills, you can also write a C extension module
yourself.
See also
The wiki page devoted to performance tips.
str and bytes objects are immutable, therefore concatenating
many strings together is inefficient as each concatenation creates a new
object.  In the general case, the total runtime cost is quadratic in the
total string length.
To accumulate many str objects, the recommended idiom is to place
them into a list and call str.join() at the end:
(another reasonably efficient idiom is to use io.StringIO)
To accumulate many bytes objects, the recommended idiom is to extend
a bytearray object using in-place concatenation (the += operator):"
What is the most efficient way to concatenate many strings together?¶,"str and bytes objects are immutable, therefore concatenating
many strings together is inefficient as each concatenation creates a new
object.  In the general case, the total runtime cost is quadratic in the
total string length.
To accumulate many str objects, the recommended idiom is to place
them into a list and call str.join() at the end:
(another reasonably efficient idiom is to use io.StringIO)
To accumulate many bytes objects, the recommended idiom is to extend
a bytearray object using in-place concatenation (the += operator):"
How do I convert between tuples and lists?¶,"The type constructor tuple(seq) converts any sequence (actually, any
iterable) into a tuple with the same items in the same order.
For example, tuple([1, 2, 3]) yields (1, 2, 3) and tuple('abc')
yields ('a', 'b', 'c').  If the argument is a tuple, it does not make a copy
but returns the same object, so it is cheap to call tuple() when you
arent sure that an object is already a tuple.
The type constructor list(seq) converts any sequence or iterable into a list
with the same items in the same order.  For example, list((1, 2, 3)) yields
[1, 2, 3] and list('abc') yields ['a', 'b', 'c'].  If the argument
is a list, it makes a copy just like seq[:] would.
Python sequences are indexed with positive numbers and negative numbers.  For
positive numbers 0 is the first index 1 is the second index and so forth.  For
negative indices -1 is the last index and -2 is the penultimate (next to last)
index and so forth.  Think of seq[-n] as the same as seq[len(seq)-n].
Using negative indices can be very convenient.  For example S[:-1] is all of
the string except for its last character, which is useful for removing the
trailing newline from a string.
Use the reversed() built-in function:
This wont touch your original sequence, but build a new copy with reversed
order to iterate over.
See the Python Cookbook for a long discussion of many ways to do this:
https://code.activestate.com/recipes/52560/
If you dont mind reordering the list, sort it and then scan from the end of the
list, deleting duplicates as you go:
If all elements of the list may be used as set keys (i.e. they are all
hashable) this is often faster
This converts the list into a set, thereby removing duplicates, and then back
into a list.
As with removing duplicates, explicitly iterating in reverse with a
delete condition is one possibility.  However, it is easier and faster
to use slice replacement with an implicit or explicit forward iteration.
Here are three variations.:
The list comprehension may be fastest.
Use a list:
Lists are equivalent to C or Pascal arrays in their time complexity; the primary
difference is that a Python list can contain objects of many different types.
The array module also provides methods for creating arrays of fixed types
with compact representations, but they are slower to index than lists.  Also
note that NumPy
and other third party packages define array-like structures with
various characteristics as well.
To get Lisp-style linked lists, you can emulate cons cells using tuples:
If mutability is desired, you could use lists instead of tuples.  Here the
analogue of a Lisp car is lisp_list[0] and the analogue of cdr is
lisp_list[1].  Only do this if youre sure you really need to, because its
usually a lot slower than using Python lists.
You probably tried to make a multidimensional array like this:
This looks correct if you print it:
But when you assign a value, it shows up in multiple places:
The reason is that replicating a list with * doesnt create copies, it only
creates references to the existing objects.  The *3 creates a list
containing 3 references to the same list of length two.  Changes to one row will
show in all rows, which is almost certainly not what you want.
The suggested approach is to create a list of the desired length first and then
fill in each element with a newly created list:
This generates a list containing 3 different lists of length two.  You can also
use a list comprehension:
Or, you can use an extension that provides a matrix datatype; NumPy is the best known.
To call a method or function and accumulate the return values is a list,
a list comprehension is an elegant solution:
To just run the method or function without saving the return values,
a plain for loop will suffice:
This is because of a combination of the fact that augmented assignment
operators are assignment operators, and the difference between mutable and
immutable objects in Python.
This discussion applies in general when augmented assignment operators are
applied to elements of a tuple that point to mutable objects, but well use
a list and += as our exemplar.
If you wrote:
The reason for the exception should be immediately clear: 1 is added to the
object a_tuple[0] points to (1), producing the result object, 2,
but when we attempt to assign the result of the computation, 2, to element
0 of the tuple, we get an error because we cant change what an element of
a tuple points to.
Under the covers, what this augmented assignment statement is doing is
approximately this:
It is the assignment part of the operation that produces the error, since a
tuple is immutable.
When you write something like:
The exception is a bit more surprising, and even more surprising is the fact
that even though there was an error, the append worked:
To see why this happens, you need to know that (a) if an object implements an
__iadd__() magic method, it gets called when the += augmented
assignment
is executed, and its return value is what gets used in the assignment statement;
and (b) for lists, __iadd__() is equivalent to calling extend() on the list
and returning the list.  Thats why we say that for lists, += is a
shorthand for list.extend():
This is equivalent to:
The object pointed to by a_list has been mutated, and the pointer to the
mutated object is assigned back to a_list.  The end result of the
assignment is a no-op, since it is a pointer to the same object that a_list
was previously pointing to, but the assignment still happens.
Thus, in our tuple example what is happening is equivalent to:
The __iadd__() succeeds, and thus the list is extended, but even though
result points to the same object that a_tuple[0] already points to,
that final assignment still results in an error, because tuples are immutable.
The technique, attributed to Randal Schwartz of the Perl community, sorts the
elements of a list by a metric which maps each element to its sort value. In
Python, use the key argument for the list.sort() method:
Merge them into an iterator of tuples, sort the resulting list, and then pick
out the element you want."
Whats a negative index?¶,"Python sequences are indexed with positive numbers and negative numbers.  For
positive numbers 0 is the first index 1 is the second index and so forth.  For
negative indices -1 is the last index and -2 is the penultimate (next to last)
index and so forth.  Think of seq[-n] as the same as seq[len(seq)-n].
Using negative indices can be very convenient.  For example S[:-1] is all of
the string except for its last character, which is useful for removing the
trailing newline from a string."
How do I iterate over a sequence in reverse order?¶,"Use the reversed() built-in function:
This wont touch your original sequence, but build a new copy with reversed
order to iterate over."
How do you remove duplicates from a list?¶,"See the Python Cookbook for a long discussion of many ways to do this:
https://code.activestate.com/recipes/52560/
If you dont mind reordering the list, sort it and then scan from the end of the
list, deleting duplicates as you go:
If all elements of the list may be used as set keys (i.e. they are all
hashable) this is often faster
This converts the list into a set, thereby removing duplicates, and then back
into a list."
How do you remove multiple items from a list¶,"As with removing duplicates, explicitly iterating in reverse with a
delete condition is one possibility.  However, it is easier and faster
to use slice replacement with an implicit or explicit forward iteration.
Here are three variations.:
The list comprehension may be fastest."
How do you make an array in Python?¶,"Use a list:
Lists are equivalent to C or Pascal arrays in their time complexity; the primary
difference is that a Python list can contain objects of many different types.
The array module also provides methods for creating arrays of fixed types
with compact representations, but they are slower to index than lists.  Also
note that NumPy
and other third party packages define array-like structures with
various characteristics as well.
To get Lisp-style linked lists, you can emulate cons cells using tuples:
If mutability is desired, you could use lists instead of tuples.  Here the
analogue of a Lisp car is lisp_list[0] and the analogue of cdr is
lisp_list[1].  Only do this if youre sure you really need to, because its
usually a lot slower than using Python lists."
How do I create a multidimensional list?¶,"You probably tried to make a multidimensional array like this:
This looks correct if you print it:
But when you assign a value, it shows up in multiple places:
The reason is that replicating a list with * doesnt create copies, it only
creates references to the existing objects.  The *3 creates a list
containing 3 references to the same list of length two.  Changes to one row will
show in all rows, which is almost certainly not what you want.
The suggested approach is to create a list of the desired length first and then
fill in each element with a newly created list:
This generates a list containing 3 different lists of length two.  You can also
use a list comprehension:
Or, you can use an extension that provides a matrix datatype; NumPy is the best known."
How do I apply a method or function to a sequence of objects?¶,"To call a method or function and accumulate the return values is a list,
a list comprehension is an elegant solution:
To just run the method or function without saving the return values,
a plain for loop will suffice:"
Why does a_tuple[i] += [item] raise an exception when the addition works?¶,"This is because of a combination of the fact that augmented assignment
operators are assignment operators, and the difference between mutable and
immutable objects in Python.
This discussion applies in general when augmented assignment operators are
applied to elements of a tuple that point to mutable objects, but well use
a list and += as our exemplar.
If you wrote:
The reason for the exception should be immediately clear: 1 is added to the
object a_tuple[0] points to (1), producing the result object, 2,
but when we attempt to assign the result of the computation, 2, to element
0 of the tuple, we get an error because we cant change what an element of
a tuple points to.
Under the covers, what this augmented assignment statement is doing is
approximately this:
It is the assignment part of the operation that produces the error, since a
tuple is immutable.
When you write something like:
The exception is a bit more surprising, and even more surprising is the fact
that even though there was an error, the append worked:
To see why this happens, you need to know that (a) if an object implements an
__iadd__() magic method, it gets called when the += augmented
assignment
is executed, and its return value is what gets used in the assignment statement;
and (b) for lists, __iadd__() is equivalent to calling extend() on the list
and returning the list.  Thats why we say that for lists, += is a
shorthand for list.extend():
This is equivalent to:
The object pointed to by a_list has been mutated, and the pointer to the
mutated object is assigned back to a_list.  The end result of the
assignment is a no-op, since it is a pointer to the same object that a_list
was previously pointing to, but the assignment still happens.
Thus, in our tuple example what is happening is equivalent to:
The __iadd__() succeeds, and thus the list is extended, but even though
result points to the same object that a_tuple[0] already points to,
that final assignment still results in an error, because tuples are immutable."
I want to do a complicated sort: can you do a Schwartzian Transform in Python?¶,"The technique, attributed to Randal Schwartz of the Perl community, sorts the
elements of a list by a metric which maps each element to its sort value. In
Python, use the key argument for the list.sort() method:"
How can I sort one list by values from another list?¶,"Merge them into an iterator of tuples, sort the resulting list, and then pick
out the element you want."
What is a class?¶,"A class is the particular object type created by executing a class statement.
Class objects are used as templates to create instance objects, which embody
both the data (attributes) and code (methods) specific to a datatype.
A class can be based on one or more other classes, called its base class(es). It
then inherits the attributes and methods of its base classes. This allows an
object model to be successively refined by inheritance.  You might have a
generic Mailbox class that provides basic accessor methods for a mailbox,
and subclasses such as MboxMailbox, MaildirMailbox, OutlookMailbox
that handle various specific mailbox formats.
A method is a function on some object x that you normally call as
x.name(arguments...).  Methods are defined as functions inside the class
definition:
Self is merely a conventional name for the first argument of a method.  A method
defined as meth(self, a, b, c) should be called as x.meth(a, b, c) for
some instance x of the class in which the definition occurs; the called
method will think it is called as meth(x, a, b, c).
See also Why must self be used explicitly in method definitions and calls?.
Use the built-in function isinstance(obj, cls).  You can
check if an object
is an instance of any of a number of classes by providing a tuple instead of a
single class, e.g. isinstance(obj, (class1, class2, ...)), and can also
check whether an object is one of Pythons built-in types, e.g.
isinstance(obj, str) or isinstance(obj, (int, float, complex)).
Note that isinstance() also checks for virtual inheritance from an
abstract base class.  So, the test will return True for a
registered class even if hasnt directly or indirectly inherited from it.  To
test for true inheritance, scan the MRO of the class:
Note that most programs do not use isinstance() on user-defined classes
very often.  If you are developing the classes yourself, a more proper
object-oriented style is to define methods on the classes that encapsulate a
particular behaviour, instead of checking the objects class and doing a
different thing based on what class it is.  For example, if you have a function
that does something:
A better approach is to define a search() method on all the classes and just
call it:
Delegation is an object oriented technique (also called a design pattern).
Lets say you have an object x and want to change the behaviour of just one
of its methods.  You can create a new class that provides a new implementation
of the method youre interested in changing and delegates all other methods to
the corresponding method of x.
Python programmers can easily implement delegation.  For example, the following
class implements a class that behaves like a file but converts all written data
to uppercase:
Here the UpperOut class redefines the write() method to convert the
argument string to uppercase before calling the underlying
self._outfile.write() method.  All other methods are delegated to the
underlying self._outfile object.  The delegation is accomplished via the
__getattr__() method; consult the language reference
for more information about controlling attribute access.
Note that for more general cases delegation can get trickier. When attributes
must be set as well as retrieved, the class must define a __setattr__()
method too, and it must do so carefully.  The basic implementation of
__setattr__() is roughly equivalent to the following:
Most __setattr__() implementations must modify
self.__dict__ to store
local state for self without causing an infinite recursion.
Use the built-in super() function:
In the example, super() will automatically determine the instance from
which it was called (the self value), look up the method resolution
order (MRO) with type(self).__mro__, and return the next in line after
Derived in the MRO: Base.
You could assign the base class to an alias and derive from the alias.  Then all
you have to change is the value assigned to the alias.  Incidentally, this trick
is also handy if you want to decide dynamically (e.g. depending on availability
of resources) which base class to use.  Example:
Both static data and static methods (in the sense of C++ or Java) are supported
in Python.
For static data, simply define a class attribute.  To assign a new value to the
attribute, you have to explicitly use the class name in the assignment:
c.count also refers to C.count for any c such that isinstance(c,
C) holds, unless overridden by c itself or by some class on the base-class
search path from c.__class__ back to C.
Caution: within a method of C, an assignment like self.count = 42 creates a
new and unrelated instance named count in selfs own dict.  Rebinding of a
class-static data name must always specify the class whether inside a method or
not:
Static methods are possible:
However, a far more straightforward way to get the effect of a static method is
via a simple module-level function:
If your code is structured so as to define one class (or tightly related class
hierarchy) per module, this supplies the desired encapsulation.
This answer actually applies to all methods, but the question usually comes up
first in the context of constructors.
In C++ youd write
In Python you have to write a single constructor that catches all cases using
default arguments.  For example:
This is not entirely equivalent, but close enough in practice.
You could also try a variable-length argument list, e.g.
The same approach works for all method definitions.
Variable names with double leading underscores are mangled to provide a simple
but effective way to define class private variables.  Any identifier of the form
__spam (at least two leading underscores, at most one trailing underscore)
is textually replaced with _classname__spam, where classname is the
current class name with any leading underscores stripped.
This doesnt guarantee privacy: an outside user can still deliberately access
the _classname__spam attribute, and private values are visible in the objects
__dict__.  Many Python programmers never bother to use private variable
names at all.
There are several possible reasons for this.
The del statement does not necessarily call __del__()  it simply
decrements the objects reference count, and if this reaches zero
__del__() is called.
If your data structures contain circular links (e.g. a tree where each child has
a parent reference and each parent has a list of children) the reference counts
will never go back to zero.  Once in a while Python runs an algorithm to detect
such cycles, but the garbage collector might run some time after the last
reference to your data structure vanishes, so your __del__() method may be
called at an inconvenient and random time. This is inconvenient if youre trying
to reproduce a problem. Worse, the order in which objects __del__()
methods are executed is arbitrary.  You can run gc.collect() to force a
collection, but there are pathological cases where objects will never be
collected.
Despite the cycle collector, its still a good idea to define an explicit
close() method on objects to be called whenever youre done with them.  The
close() method can then remove attributes that refer to subobjects.  Dont
call __del__() directly  __del__() should call close() and
close() should make sure that it can be called more than once for the same
object.
Another way to avoid cyclical references is to use the weakref module,
which allows you to point to objects without incrementing their reference count.
Tree data structures, for instance, should use weak references for their parent
and sibling references (if they need them!).
Finally, if your __del__() method raises an exception, a warning message
is printed to sys.stderr.
Python does not keep track of all instances of a class (or of a built-in type).
You can program the classs constructor to keep track of all instances by
keeping a list of weak references to each instance.
The id() builtin returns an integer that is guaranteed to be unique during
the lifetime of the object.  Since in CPython, this is the objects memory
address, it happens frequently that after an object is deleted from memory, the
next freshly created object is allocated at the same position in memory.  This
is illustrated by this example:
The two ids belong to different integer objects that are created before, and
deleted immediately after execution of the id() call.  To be sure that
objects whose id you want to examine are still alive, create another reference
to the object:
The is operator tests for object identity.  The test a is b is
equivalent to id(a) == id(b).
The most important property of an identity test is that an object is always
identical to itself, a is a always returns True.  Identity tests are
usually faster than equality tests.  And unlike equality tests, identity tests
are guaranteed to return a boolean True or False.
However, identity tests can only be substituted for equality tests when
object identity is assured.  Generally, there are three circumstances where
identity is guaranteed:
1) Assignments create new names but do not change object identity.  After the
assignment new = old, it is guaranteed that new is old.
2) Putting an object in a container that stores object references does not
change object identity.  After the list assignment s[0] = x, it is
guaranteed that s[0] is x.
3) If an object is a singleton, it means that only one instance of that object
can exist.  After the assignments a = None and b = None, it is
guaranteed that a is b because None is a singleton.
In most other circumstances, identity tests are inadvisable and equality tests
are preferred.  In particular, identity tests should not be used to check
constants such as int and str which arent guaranteed to be
singletons:
Likewise, new instances of mutable containers are never identical:
In the standard library code, you will see several common patterns for
correctly using identity tests:
1) As recommended by PEP 8, an identity test is the preferred way to check
for None.  This reads like plain English in code and avoids confusion with
other objects that may have boolean values that evaluate to false.
2) Detecting optional arguments can be tricky when None is a valid input
value.  In those situations, you can create a singleton sentinel object
guaranteed to be distinct from other objects.  For example, here is how
to implement a method that behaves like dict.pop():
3) Container implementations sometimes need to augment equality tests with
identity tests.  This prevents the code from being confused by objects such as
float('NaN') that are not equal to themselves.
For example, here is the implementation of
collections.abc.Sequence.__contains__():
When subclassing an immutable type, override the __new__() method
instead of the __init__() method.  The latter only runs after an
instance is created, which is too late to alter data in an immutable
instance.
All of these immutable classes have a different signature than their
parent class:
The classes can be used like this:
The two principal tools for caching methods are
functools.cached_property() and functools.lru_cache().  The
former stores results at the instance level and the latter at the class
level.
The cached_property approach only works with methods that do not take
any arguments.  It does not create a reference to the instance.  The
cached method result will be kept only as long as the instance is alive.
The advantage is that when an instance is no longer used, the cached
method result will be released right away.  The disadvantage is that if
instances accumulate, so too will the accumulated method results.  They
can grow without bound.
The lru_cache approach works with methods that have hashable
arguments.  It creates a reference to the instance unless special
efforts are made to pass in weak references.
The advantage of the least recently used algorithm is that the cache is
bounded by the specified maxsize.  The disadvantage is that instances
are kept alive until they age out of the cache or until the cache is
cleared.
This example shows the various techniques:
The above example assumes that the station_id never changes.  If the
relevant instance attributes are mutable, the cached_property approach
cant be made to work because it cannot detect changes to the
attributes.
To make the lru_cache approach work when the station_id is mutable,
the class needs to define the __eq__() and __hash__()
methods so that the cache can detect relevant attribute updates:"
What is a method?¶,"A method is a function on some object x that you normally call as
x.name(arguments...).  Methods are defined as functions inside the class
definition:"
What is self?¶,"Self is merely a conventional name for the first argument of a method.  A method
defined as meth(self, a, b, c) should be called as x.meth(a, b, c) for
some instance x of the class in which the definition occurs; the called
method will think it is called as meth(x, a, b, c).
See also Why must self be used explicitly in method definitions and calls?."
How do I check if an object is an instance of a given class or of a subclass of it?¶,"Use the built-in function isinstance(obj, cls).  You can
check if an object
is an instance of any of a number of classes by providing a tuple instead of a
single class, e.g. isinstance(obj, (class1, class2, ...)), and can also
check whether an object is one of Pythons built-in types, e.g.
isinstance(obj, str) or isinstance(obj, (int, float, complex)).
Note that isinstance() also checks for virtual inheritance from an
abstract base class.  So, the test will return True for a
registered class even if hasnt directly or indirectly inherited from it.  To
test for true inheritance, scan the MRO of the class:
Note that most programs do not use isinstance() on user-defined classes
very often.  If you are developing the classes yourself, a more proper
object-oriented style is to define methods on the classes that encapsulate a
particular behaviour, instead of checking the objects class and doing a
different thing based on what class it is.  For example, if you have a function
that does something:
A better approach is to define a search() method on all the classes and just
call it:"
What is delegation?¶,"Delegation is an object oriented technique (also called a design pattern).
Lets say you have an object x and want to change the behaviour of just one
of its methods.  You can create a new class that provides a new implementation
of the method youre interested in changing and delegates all other methods to
the corresponding method of x.
Python programmers can easily implement delegation.  For example, the following
class implements a class that behaves like a file but converts all written data
to uppercase:
Here the UpperOut class redefines the write() method to convert the
argument string to uppercase before calling the underlying
self._outfile.write() method.  All other methods are delegated to the
underlying self._outfile object.  The delegation is accomplished via the
__getattr__() method; consult the language reference
for more information about controlling attribute access.
Note that for more general cases delegation can get trickier. When attributes
must be set as well as retrieved, the class must define a __setattr__()
method too, and it must do so carefully.  The basic implementation of
__setattr__() is roughly equivalent to the following:
Most __setattr__() implementations must modify
self.__dict__ to store
local state for self without causing an infinite recursion."
How do I call a method defined in a base class from a derived class that extends it?¶,"Use the built-in super() function:
In the example, super() will automatically determine the instance from
which it was called (the self value), look up the method resolution
order (MRO) with type(self).__mro__, and return the next in line after
Derived in the MRO: Base."
How can I organize my code to make it easier to change the base class?¶,"You could assign the base class to an alias and derive from the alias.  Then all
you have to change is the value assigned to the alias.  Incidentally, this trick
is also handy if you want to decide dynamically (e.g. depending on availability
of resources) which base class to use.  Example:"
How do I create static class data and static class methods?¶,"Both static data and static methods (in the sense of C++ or Java) are supported
in Python.
For static data, simply define a class attribute.  To assign a new value to the
attribute, you have to explicitly use the class name in the assignment:
c.count also refers to C.count for any c such that isinstance(c,
C) holds, unless overridden by c itself or by some class on the base-class
search path from c.__class__ back to C.
Caution: within a method of C, an assignment like self.count = 42 creates a
new and unrelated instance named count in selfs own dict.  Rebinding of a
class-static data name must always specify the class whether inside a method or
not:
Static methods are possible:
However, a far more straightforward way to get the effect of a static method is
via a simple module-level function:
If your code is structured so as to define one class (or tightly related class
hierarchy) per module, this supplies the desired encapsulation."
How can I overload constructors (or methods) in Python?¶,"This answer actually applies to all methods, but the question usually comes up
first in the context of constructors.
In C++ youd write
In Python you have to write a single constructor that catches all cases using
default arguments.  For example:
This is not entirely equivalent, but close enough in practice.
You could also try a variable-length argument list, e.g.
The same approach works for all method definitions."
I try to use __spam and I get an error about _SomeClassName__spam.¶,"Variable names with double leading underscores are mangled to provide a simple
but effective way to define class private variables.  Any identifier of the form
__spam (at least two leading underscores, at most one trailing underscore)
is textually replaced with _classname__spam, where classname is the
current class name with any leading underscores stripped.
This doesnt guarantee privacy: an outside user can still deliberately access
the _classname__spam attribute, and private values are visible in the objects
__dict__.  Many Python programmers never bother to use private variable
names at all."
My class defines __del__ but it is not called when I delete the object.¶,"There are several possible reasons for this.
The del statement does not necessarily call __del__()  it simply
decrements the objects reference count, and if this reaches zero
__del__() is called.
If your data structures contain circular links (e.g. a tree where each child has
a parent reference and each parent has a list of children) the reference counts
will never go back to zero.  Once in a while Python runs an algorithm to detect
such cycles, but the garbage collector might run some time after the last
reference to your data structure vanishes, so your __del__() method may be
called at an inconvenient and random time. This is inconvenient if youre trying
to reproduce a problem. Worse, the order in which objects __del__()
methods are executed is arbitrary.  You can run gc.collect() to force a
collection, but there are pathological cases where objects will never be
collected.
Despite the cycle collector, its still a good idea to define an explicit
close() method on objects to be called whenever youre done with them.  The
close() method can then remove attributes that refer to subobjects.  Dont
call __del__() directly  __del__() should call close() and
close() should make sure that it can be called more than once for the same
object.
Another way to avoid cyclical references is to use the weakref module,
which allows you to point to objects without incrementing their reference count.
Tree data structures, for instance, should use weak references for their parent
and sibling references (if they need them!).
Finally, if your __del__() method raises an exception, a warning message
is printed to sys.stderr."
How do I get a list of all instances of a given class?¶,"Python does not keep track of all instances of a class (or of a built-in type).
You can program the classs constructor to keep track of all instances by
keeping a list of weak references to each instance."
Why does the result of id() appear to be not unique?¶,"The id() builtin returns an integer that is guaranteed to be unique during
the lifetime of the object.  Since in CPython, this is the objects memory
address, it happens frequently that after an object is deleted from memory, the
next freshly created object is allocated at the same position in memory.  This
is illustrated by this example:
The two ids belong to different integer objects that are created before, and
deleted immediately after execution of the id() call.  To be sure that
objects whose id you want to examine are still alive, create another reference
to the object:"
When can I rely on identity tests with the is operator?¶,"The is operator tests for object identity.  The test a is b is
equivalent to id(a) == id(b).
The most important property of an identity test is that an object is always
identical to itself, a is a always returns True.  Identity tests are
usually faster than equality tests.  And unlike equality tests, identity tests
are guaranteed to return a boolean True or False.
However, identity tests can only be substituted for equality tests when
object identity is assured.  Generally, there are three circumstances where
identity is guaranteed:
1) Assignments create new names but do not change object identity.  After the
assignment new = old, it is guaranteed that new is old.
2) Putting an object in a container that stores object references does not
change object identity.  After the list assignment s[0] = x, it is
guaranteed that s[0] is x.
3) If an object is a singleton, it means that only one instance of that object
can exist.  After the assignments a = None and b = None, it is
guaranteed that a is b because None is a singleton.
In most other circumstances, identity tests are inadvisable and equality tests
are preferred.  In particular, identity tests should not be used to check
constants such as int and str which arent guaranteed to be
singletons:
Likewise, new instances of mutable containers are never identical:
In the standard library code, you will see several common patterns for
correctly using identity tests:
1) As recommended by PEP 8, an identity test is the preferred way to check
for None.  This reads like plain English in code and avoids confusion with
other objects that may have boolean values that evaluate to false.
2) Detecting optional arguments can be tricky when None is a valid input
value.  In those situations, you can create a singleton sentinel object
guaranteed to be distinct from other objects.  For example, here is how
to implement a method that behaves like dict.pop():
3) Container implementations sometimes need to augment equality tests with
identity tests.  This prevents the code from being confused by objects such as
float('NaN') that are not equal to themselves.
For example, here is the implementation of
collections.abc.Sequence.__contains__():"
How can a subclass control what data is stored in an immutable instance?¶,"When subclassing an immutable type, override the __new__() method
instead of the __init__() method.  The latter only runs after an
instance is created, which is too late to alter data in an immutable
instance.
All of these immutable classes have a different signature than their
parent class:
The classes can be used like this:"
How do I cache method calls?¶,"The two principal tools for caching methods are
functools.cached_property() and functools.lru_cache().  The
former stores results at the instance level and the latter at the class
level.
The cached_property approach only works with methods that do not take
any arguments.  It does not create a reference to the instance.  The
cached method result will be kept only as long as the instance is alive.
The advantage is that when an instance is no longer used, the cached
method result will be released right away.  The disadvantage is that if
instances accumulate, so too will the accumulated method results.  They
can grow without bound.
The lru_cache approach works with methods that have hashable
arguments.  It creates a reference to the instance unless special
efforts are made to pass in weak references.
The advantage of the least recently used algorithm is that the cache is
bounded by the specified maxsize.  The disadvantage is that instances
are kept alive until they age out of the cache or until the cache is
cleared.
This example shows the various techniques:
The above example assumes that the station_id never changes.  If the
relevant instance attributes are mutable, the cached_property approach
cant be made to work because it cannot detect changes to the
attributes.
To make the lru_cache approach work when the station_id is mutable,
the class needs to define the __eq__() and __hash__()
methods so that the cache can detect relevant attribute updates:"
How do I create a .pyc file?¶,"When a module is imported for the first time (or when the source file has
changed since the current compiled file was created) a .pyc file containing
the compiled code should be created in a __pycache__ subdirectory of the
directory containing the .py file.  The .pyc file will have a
filename that starts with the same name as the .py file, and ends with
.pyc, with a middle component that depends on the particular python
binary that created it.  (See PEP 3147 for details.)
One reason that a .pyc file may not be created is a permissions problem
with the directory containing the source file, meaning that the __pycache__
subdirectory cannot be created. This can happen, for example, if you develop as
one user but run as another, such as if you are testing with a web server.
Unless the PYTHONDONTWRITEBYTECODE environment variable is set,
creation of a .pyc file is automatic if youre importing a module and Python
has the ability (permissions, free space, etc) to create a __pycache__
subdirectory and write the compiled module to that subdirectory.
Running Python on a top level script is not considered an import and no
.pyc will be created.  For example, if you have a top-level module
foo.py that imports another module xyz.py, when you run foo (by
typing python foo.py as a shell command), a .pyc will be created for
xyz because xyz is imported, but no .pyc file will be created for
foo since foo.py isnt being imported.
If you need to create a .pyc file for foo  that is, to create a
.pyc file for a module that is not imported  you can, using the
py_compile and compileall modules.
The py_compile module can manually compile any module.  One way is to use
the compile() function in that module interactively:
This will write the .pyc to a __pycache__ subdirectory in the same
location as foo.py (or you can override that with the optional parameter
cfile).
You can also automatically compile all files in a directory or directories using
the compileall module.  You can do it from the shell prompt by running
compileall.py and providing the path of a directory containing Python files
to compile:
A module can find out its own module name by looking at the predefined global
variable __name__.  If this has the value '__main__', the program is
running as a script.  Many modules that are usually used by importing them also
provide a command-line interface or a self-test, and only execute this code
after checking __name__:
Suppose you have the following modules:
foo.py:
bar.py:
The problem is that the interpreter will perform the following steps:
main imports foo
Empty globals for foo are created
foo is compiled and starts executing
foo imports bar
Empty globals for bar are created
bar is compiled and starts executing
bar imports foo (which is a no-op since there already is a module named foo)
The import mechanism tries to read foo_var from foo globals, to set bar.foo_var = foo.foo_var
The last step fails, because Python isnt done with interpreting foo yet and
the global symbol dictionary for foo is still empty.
The same thing happens when you use import foo, and then try to access
foo.foo_var in global code.
There are (at least) three possible workarounds for this problem.
Guido van Rossum recommends avoiding all uses of from <module> import ...,
and placing all code inside functions.  Initializations of global variables and
class variables should use constants or built-in functions only.  This means
everything from an imported module is referenced as <module>.<name>.
Jim Roskind suggests performing steps in the following order in each module:
exports (globals, functions, and classes that dont need imported base
classes)
import statements
active code (including globals that are initialized from imported values).
Van Rossum doesnt like this approach much because the imports appear in a
strange place, but it does work.
Matthias Urlichs recommends restructuring your code so that the recursive import
is not necessary in the first place.
These solutions are not mutually exclusive.
Consider using the convenience function import_module() from
importlib instead:
For reasons of efficiency as well as consistency, Python only reads the module
file on the first time a module is imported.  If it didnt, in a program
consisting of many modules where each one imports the same basic module, the
basic module would be parsed and re-parsed many times.  To force re-reading of a
changed module, do this:
Warning: this technique is not 100% fool-proof.  In particular, modules
containing statements like
will continue to work with the old version of the imported objects.  If the
module contains class definitions, existing class instances will not be
updated to use the new class definition.  This can result in the following
paradoxical behaviour:
The nature of the problem is made clear if you print out the identity of the
class objects:"
How do I find the current module name?¶,"A module can find out its own module name by looking at the predefined global
variable __name__.  If this has the value '__main__', the program is
running as a script.  Many modules that are usually used by importing them also
provide a command-line interface or a self-test, and only execute this code
after checking __name__:"
How can I have modules that mutually import each other?¶,"Suppose you have the following modules:
foo.py:
bar.py:
The problem is that the interpreter will perform the following steps:
main imports foo
Empty globals for foo are created
foo is compiled and starts executing
foo imports bar
Empty globals for bar are created
bar is compiled and starts executing
bar imports foo (which is a no-op since there already is a module named foo)
The import mechanism tries to read foo_var from foo globals, to set bar.foo_var = foo.foo_var
The last step fails, because Python isnt done with interpreting foo yet and
the global symbol dictionary for foo is still empty.
The same thing happens when you use import foo, and then try to access
foo.foo_var in global code.
There are (at least) three possible workarounds for this problem.
Guido van Rossum recommends avoiding all uses of from <module> import ...,
and placing all code inside functions.  Initializations of global variables and
class variables should use constants or built-in functions only.  This means
everything from an imported module is referenced as <module>.<name>.
Jim Roskind suggests performing steps in the following order in each module:
exports (globals, functions, and classes that dont need imported base
classes)
import statements
active code (including globals that are initialized from imported values).
Van Rossum doesnt like this approach much because the imports appear in a
strange place, but it does work.
Matthias Urlichs recommends restructuring your code so that the recursive import
is not necessary in the first place.
These solutions are not mutually exclusive."
__import__(x.y.z) returns <module x>; how do I get z?¶,"Consider using the convenience function import_module() from
importlib instead:"
"When I edit an imported module and reimport it, the changes dont show up.  Why does this happen?¶","For reasons of efficiency as well as consistency, Python only reads the module
file on the first time a module is imported.  If it didnt, in a program
consisting of many modules where each one imports the same basic module, the
basic module would be parsed and re-parsed many times.  To force re-reading of a
changed module, do this:
Warning: this technique is not 100% fool-proof.  In particular, modules
containing statements like
will continue to work with the old version of the imported objects.  If the
module contains class definitions, existing class instances will not be
updated to use the new class definition.  This can result in the following
paradoxical behaviour:
The nature of the problem is made clear if you print out the identity of the
class objects:"
How do I find a module or application to perform task X?¶,"Check the Library Reference to see if theres a relevant
standard library module.  (Eventually youll learn whats in the standard
library and will be able to skip this step.)
For third-party packages, search the Python Package Index or try Google or
another web search engine.  Searching for Python plus a keyword or two for
your topic of interest will usually find something helpful.
If you cant find a source file for a module it may be a built-in or
dynamically loaded module implemented in C, C++ or other compiled language.
In this case you may not have the source file or it may be something like
mathmodule.c, somewhere in a C source directory (not on the Python Path).
There are (at least) three kinds of modules in Python:
modules written in Python (.py);
modules written in C and dynamically loaded (.dll, .pyd, .so, .sl, etc);
modules written in C and linked with the interpreter; to get a list of these,
type:
You need to do two things: the script files mode must be executable and the
first line must begin with #! followed by the path of the Python
interpreter.
The first is done by executing chmod +x scriptfile or perhaps chmod 755
scriptfile.
The second can be done in a number of ways.  The most straightforward way is to
write
as the very first line of your file, using the pathname for where the Python
interpreter is installed on your platform.
If you would like the script to be independent of where the Python interpreter
lives, you can use the env program.  Almost all Unix variants support
the following, assuming the Python interpreter is in a directory on the users
PATH:
Dont do this for CGI scripts.  The PATH variable for CGI scripts is
often very minimal, so you need to use the actual absolute pathname of the
interpreter.
Occasionally, a users environment is so full that the /usr/bin/env
program fails; or theres no env program at all.  In that case, you can try the
following hack (due to Alex Rezinsky):
The minor disadvantage is that this defines the scripts __doc__ string.
However, you can fix that by adding
For Unix variants: The standard Python source distribution comes with a curses
module in the Modules subdirectory, though its not compiled by default.
(Note that this is not available in the Windows distribution  there is no
curses module for Windows.)
The curses module supports basic curses features as well as many additional
functions from ncurses and SYSV curses such as colour, alternative character set
support, pads, and mouse support. This means the module isnt compatible with
operating systems that only have BSD curses, but there dont seem to be any
currently maintained OSes that fall into this category.
The atexit module provides a register function that is similar to Cs
onexit().
The most common problem is that the signal handler is declared with the wrong
argument list.  It is called as
so it should be declared with two parameters:"
"Where is the math.py (socket.py, regex.py, etc.) source file?¶","If you cant find a source file for a module it may be a built-in or
dynamically loaded module implemented in C, C++ or other compiled language.
In this case you may not have the source file or it may be something like
mathmodule.c, somewhere in a C source directory (not on the Python Path).
There are (at least) three kinds of modules in Python:
modules written in Python (.py);
modules written in C and dynamically loaded (.dll, .pyd, .so, .sl, etc);
modules written in C and linked with the interpreter; to get a list of these,
type:"
How do I make a Python script executable on Unix?¶,"You need to do two things: the script files mode must be executable and the
first line must begin with #! followed by the path of the Python
interpreter.
The first is done by executing chmod +x scriptfile or perhaps chmod 755
scriptfile.
The second can be done in a number of ways.  The most straightforward way is to
write
as the very first line of your file, using the pathname for where the Python
interpreter is installed on your platform.
If you would like the script to be independent of where the Python interpreter
lives, you can use the env program.  Almost all Unix variants support
the following, assuming the Python interpreter is in a directory on the users
PATH:
Dont do this for CGI scripts.  The PATH variable for CGI scripts is
often very minimal, so you need to use the actual absolute pathname of the
interpreter.
Occasionally, a users environment is so full that the /usr/bin/env
program fails; or theres no env program at all.  In that case, you can try the
following hack (due to Alex Rezinsky):
The minor disadvantage is that this defines the scripts __doc__ string.
However, you can fix that by adding"
Is there a curses/termcap package for Python?¶,"For Unix variants: The standard Python source distribution comes with a curses
module in the Modules subdirectory, though its not compiled by default.
(Note that this is not available in the Windows distribution  there is no
curses module for Windows.)
The curses module supports basic curses features as well as many additional
functions from ncurses and SYSV curses such as colour, alternative character set
support, pads, and mouse support. This means the module isnt compatible with
operating systems that only have BSD curses, but there dont seem to be any
currently maintained OSes that fall into this category."
Is there an equivalent to Cs onexit() in Python?¶,"The atexit module provides a register function that is similar to Cs
onexit()."
Why dont my signal handlers work?¶,"The most common problem is that the signal handler is declared with the wrong
argument list.  It is called as
so it should be declared with two parameters:"
How do I test a Python program or component?¶,"Python comes with two testing frameworks.  The doctest module finds
examples in the docstrings for a module and runs them, comparing the output with
the expected output given in the docstring.
The unittest module is a fancier testing framework modelled on Java and
Smalltalk testing frameworks.
To make testing easier, you should use good modular design in your program.
Your program should have almost all functionality
encapsulated in either functions or class methods  and this sometimes has the
surprising and delightful effect of making the program run faster (because local
variable accesses are faster than global accesses).  Furthermore the program
should avoid depending on mutating global variables, since this makes testing
much more difficult to do.
The global main logic of your program may be as simple as
at the bottom of the main module of your program.
Once your program is organized as a tractable collection of function and class
behaviours, you should write test functions that exercise the behaviours.  A
test suite that automates a sequence of tests can be associated with each module.
This sounds like a lot of work, but since Python is so terse and flexible its
surprisingly easy.  You can make coding much more pleasant and fun by writing
your test functions in parallel with the production code, since this makes it
easy to find bugs and even design flaws earlier.
Support modules that are not intended to be the main module of a program may
include a self-test of the module.
Even programs that interact with complex external interfaces may be tested when
the external interfaces are unavailable by using fake interfaces implemented
in Python.
The pydoc module can create HTML from the doc strings in your Python
source code.  An alternative for creating API documentation purely from
docstrings is epydoc.  Sphinx can also include docstring content.
For Unix variants there are several solutions.  Its straightforward to do this
using curses, but curses is a fairly large module to learn."
How do I create documentation from doc strings?¶,"The pydoc module can create HTML from the doc strings in your Python
source code.  An alternative for creating API documentation purely from
docstrings is epydoc.  Sphinx can also include docstring content."
How do I get a single keypress at a time?¶,"For Unix variants there are several solutions.  Its straightforward to do this
using curses, but curses is a fairly large module to learn."
How do I program using threads?¶,"Be sure to use the threading module and not the _thread module.
The threading module builds convenient abstractions on top of the
low-level primitives provided by the _thread module.
As soon as the main thread exits, all threads are killed.  Your main thread is
running too quickly, giving the threads no time to do any work.
A simple fix is to add a sleep to the end of the program thats long enough for
all the threads to finish:
But now (on many platforms) the threads dont run in parallel, but appear to run
sequentially, one at a time!  The reason is that the OS thread scheduler doesnt
start a new thread until the previous thread is blocked.
A simple fix is to add a tiny sleep to the start of the run function:
Instead of trying to guess a good delay value for time.sleep(),
its better to use some kind of semaphore mechanism.  One idea is to use the
queue module to create a queue object, let each thread append a token to
the queue when it finishes, and let the main thread read as many tokens from the
queue as there are threads.
The easiest way is to use the concurrent.futures module,
especially the ThreadPoolExecutor class.
Or, if you want fine control over the dispatching algorithm, you can write
your own logic manually.  Use the queue module to create a queue
containing a list of jobs.  The Queue class maintains a
list of objects and has a .put(obj) method that adds items to the queue and
a .get() method to return them.  The class will take care of the locking
necessary to ensure that each job is handed out exactly once.
Heres a trivial example:
When run, this will produce the following output:
Consult the modules documentation for more details; the Queue
class provides a featureful interface.
A global interpreter lock (GIL) is used internally to ensure that only one
thread runs in the Python VM at a time.  In general, Python offers to switch
among threads only between bytecode instructions; how frequently it switches can
be set via sys.setswitchinterval().  Each bytecode instruction and
therefore all the C implementation code reached from each instruction is
therefore atomic from the point of view of a Python program.
In theory, this means an exact accounting requires an exact understanding of the
PVM bytecode implementation.  In practice, it means that operations on shared
variables of built-in data types (ints, lists, dicts, etc) that look atomic
really are.
For example, the following operations are all atomic (L, L1, L2 are lists, D,
D1, D2 are dicts, x, y are objects, i, j are ints):
These arent:
Operations that replace other objects may invoke those other objects
__del__() method when their reference count reaches zero, and that can
affect things.  This is especially true for the mass updates to dictionaries and
lists.  When in doubt, use a mutex!
The global interpreter lock (GIL) is often seen as a hindrance to Pythons
deployment on high-end multiprocessor server machines, because a multi-threaded
Python program effectively only uses one CPU, due to the insistence that
(almost) all Python code can only run while the GIL is held.
Back in the days of Python 1.5, Greg Stein actually implemented a comprehensive
patch set (the free threading patches) that removed the GIL and replaced it
with fine-grained locking.  Adam Olsen recently did a similar experiment
in his python-safethread
project.  Unfortunately, both experiments exhibited a sharp drop in single-thread
performance (at least 30% slower), due to the amount of fine-grained locking
necessary to compensate for the removal of the GIL.
This doesnt mean that you cant make good use of Python on multi-CPU machines!
You just have to be creative with dividing the work up between multiple
processes rather than multiple threads.  The
ProcessPoolExecutor class in the new
concurrent.futures module provides an easy way of doing so; the
multiprocessing module provides a lower-level API in case you want
more control over dispatching of tasks.
Judicious use of C extensions will also help; if you use a C extension to
perform a time-consuming task, the extension can release the GIL while the
thread of execution is in the C code and allow other threads to get some work
done.  Some standard library modules such as zlib and hashlib
already do this.
It has been suggested that the GIL should be a per-interpreter-state lock rather
than truly global; interpreters then wouldnt be able to share objects.
Unfortunately, this isnt likely to happen either.  It would be a tremendous
amount of work, because many object implementations currently have global state.
For example, small integers and short strings are cached; these caches would
have to be moved to the interpreter state.  Other object types have their own
free list; these free lists would have to be moved to the interpreter state.
And so on.
And I doubt that it can even be done in finite time, because the same problem
exists for 3rd party extensions.  It is likely that 3rd party extensions are
being written at a faster rate than you can convert them to store all their
global state in the interpreter state.
And finally, once you have multiple interpreters not sharing any state, what
have you gained over running each interpreter in a separate process?"
None of my threads seem to run: why?¶,"As soon as the main thread exits, all threads are killed.  Your main thread is
running too quickly, giving the threads no time to do any work.
A simple fix is to add a sleep to the end of the program thats long enough for
all the threads to finish:
But now (on many platforms) the threads dont run in parallel, but appear to run
sequentially, one at a time!  The reason is that the OS thread scheduler doesnt
start a new thread until the previous thread is blocked.
A simple fix is to add a tiny sleep to the start of the run function:
Instead of trying to guess a good delay value for time.sleep(),
its better to use some kind of semaphore mechanism.  One idea is to use the
queue module to create a queue object, let each thread append a token to
the queue when it finishes, and let the main thread read as many tokens from the
queue as there are threads."
How do I parcel out work among a bunch of worker threads?¶,"The easiest way is to use the concurrent.futures module,
especially the ThreadPoolExecutor class.
Or, if you want fine control over the dispatching algorithm, you can write
your own logic manually.  Use the queue module to create a queue
containing a list of jobs.  The Queue class maintains a
list of objects and has a .put(obj) method that adds items to the queue and
a .get() method to return them.  The class will take care of the locking
necessary to ensure that each job is handed out exactly once.
Heres a trivial example:
When run, this will produce the following output:
Consult the modules documentation for more details; the Queue
class provides a featureful interface."
What kinds of global value mutation are thread-safe?¶,"A global interpreter lock (GIL) is used internally to ensure that only one
thread runs in the Python VM at a time.  In general, Python offers to switch
among threads only between bytecode instructions; how frequently it switches can
be set via sys.setswitchinterval().  Each bytecode instruction and
therefore all the C implementation code reached from each instruction is
therefore atomic from the point of view of a Python program.
In theory, this means an exact accounting requires an exact understanding of the
PVM bytecode implementation.  In practice, it means that operations on shared
variables of built-in data types (ints, lists, dicts, etc) that look atomic
really are.
For example, the following operations are all atomic (L, L1, L2 are lists, D,
D1, D2 are dicts, x, y are objects, i, j are ints):
These arent:
Operations that replace other objects may invoke those other objects
__del__() method when their reference count reaches zero, and that can
affect things.  This is especially true for the mass updates to dictionaries and
lists.  When in doubt, use a mutex!"
Cant we get rid of the Global Interpreter Lock?¶,"The global interpreter lock (GIL) is often seen as a hindrance to Pythons
deployment on high-end multiprocessor server machines, because a multi-threaded
Python program effectively only uses one CPU, due to the insistence that
(almost) all Python code can only run while the GIL is held.
Back in the days of Python 1.5, Greg Stein actually implemented a comprehensive
patch set (the free threading patches) that removed the GIL and replaced it
with fine-grained locking.  Adam Olsen recently did a similar experiment
in his python-safethread
project.  Unfortunately, both experiments exhibited a sharp drop in single-thread
performance (at least 30% slower), due to the amount of fine-grained locking
necessary to compensate for the removal of the GIL.
This doesnt mean that you cant make good use of Python on multi-CPU machines!
You just have to be creative with dividing the work up between multiple
processes rather than multiple threads.  The
ProcessPoolExecutor class in the new
concurrent.futures module provides an easy way of doing so; the
multiprocessing module provides a lower-level API in case you want
more control over dispatching of tasks.
Judicious use of C extensions will also help; if you use a C extension to
perform a time-consuming task, the extension can release the GIL while the
thread of execution is in the C code and allow other threads to get some work
done.  Some standard library modules such as zlib and hashlib
already do this.
It has been suggested that the GIL should be a per-interpreter-state lock rather
than truly global; interpreters then wouldnt be able to share objects.
Unfortunately, this isnt likely to happen either.  It would be a tremendous
amount of work, because many object implementations currently have global state.
For example, small integers and short strings are cached; these caches would
have to be moved to the interpreter state.  Other object types have their own
free list; these free lists would have to be moved to the interpreter state.
And so on.
And I doubt that it can even be done in finite time, because the same problem
exists for 3rd party extensions.  It is likely that 3rd party extensions are
being written at a faster rate than you can convert them to store all their
global state in the interpreter state.
And finally, once you have multiple interpreters not sharing any state, what
have you gained over running each interpreter in a separate process?"
How do I delete a file? (And other file questions)¶,"Use os.remove(filename) or os.unlink(filename); for documentation, see
the os module.  The two functions are identical; unlink() is simply
the name of the Unix system call for this function.
To remove a directory, use os.rmdir(); use os.mkdir() to create one.
os.makedirs(path) will create any intermediate directories in path that
dont exist. os.removedirs(path) will remove intermediate directories as
long as theyre empty; if you want to delete an entire directory tree and its
contents, use shutil.rmtree().
To rename a file, use os.rename(old_path, new_path).
To truncate a file, open it using f = open(filename, ""rb+""), and use
f.truncate(offset); offset defaults to the current seek position.  Theres
also os.ftruncate(fd, offset) for files opened with os.open(), where
fd is the file descriptor (a small integer).
The shutil module also contains a number of functions to work on files
including copyfile(), copytree(), and
rmtree().
The shutil module contains a copyfile() function.
Note that on Windows NTFS volumes, it does not copy
alternate data streams
nor resource forks
on macOS HFS+ volumes, though both are now rarely used.
It also doesnt copy file permissions and metadata, though using
shutil.copy2() instead will preserve most (though not all) of it.
To read or write complex binary data formats, its best to use the struct
module.  It allows you to take a string containing binary data (usually numbers)
and convert it to Python objects; and vice versa.
For example, the following code reads two 2-byte integers and one 4-byte integer
in big-endian format from a file:
The > in the format string forces big-endian data; the letter h reads one
short integer (2 bytes), and l reads one long integer (4 bytes) from the
string.
For data that is more regular (e.g. a homogeneous list of ints or floats),
you can also use the array module.
Note
To read and write binary data, it is mandatory to open the file in
binary mode (here, passing ""rb"" to open()).  If you use
""r"" instead (the default), the file will be open in text mode
and f.read() will return str objects rather than
bytes objects.
os.read() is a low-level function which takes a file descriptor, a small
integer representing the opened file.  os.popen() creates a high-level
file object, the same type returned by the built-in open() function.
Thus, to read n bytes from a pipe p created with os.popen(), you need to
use p.read(n).
For Win32, OSX, Linux, BSD, Jython, IronPython:
https://pypi.org/project/pyserial/
For Unix, see a Usenet post by Mitch Chapman:
https://groups.google.com/groups?selm=34A04430.CF9@ohioee.com
Python file objects are a high-level layer of
abstraction on low-level C file descriptors.
For most file objects you create in Python via the built-in open()
function, f.close() marks the Python file object as being closed from
Pythons point of view, and also arranges to close the underlying C file
descriptor.  This also happens automatically in fs destructor, when
f becomes garbage.
But stdin, stdout and stderr are treated specially by Python, because of the
special status also given to them by C.  Running sys.stdout.close() marks
the Python-level file object as being closed, but does not close the
associated C file descriptor.
To close the underlying C file descriptor for one of these three, you should
first be sure thats what you really want to do (e.g., you may confuse
extension modules trying to do I/O).  If it is, use os.close():
Or you can use the numeric constants 0, 1 and 2, respectively."
How do I copy a file?¶,"The shutil module contains a copyfile() function.
Note that on Windows NTFS volumes, it does not copy
alternate data streams
nor resource forks
on macOS HFS+ volumes, though both are now rarely used.
It also doesnt copy file permissions and metadata, though using
shutil.copy2() instead will preserve most (though not all) of it."
How do I read (or write) binary data?¶,"To read or write complex binary data formats, its best to use the struct
module.  It allows you to take a string containing binary data (usually numbers)
and convert it to Python objects; and vice versa.
For example, the following code reads two 2-byte integers and one 4-byte integer
in big-endian format from a file:
The > in the format string forces big-endian data; the letter h reads one
short integer (2 bytes), and l reads one long integer (4 bytes) from the
string.
For data that is more regular (e.g. a homogeneous list of ints or floats),
you can also use the array module.
Note
To read and write binary data, it is mandatory to open the file in
binary mode (here, passing ""rb"" to open()).  If you use
""r"" instead (the default), the file will be open in text mode
and f.read() will return str objects rather than
bytes objects."
I cant seem to use os.read() on a pipe created with os.popen(); why?¶,"os.read() is a low-level function which takes a file descriptor, a small
integer representing the opened file.  os.popen() creates a high-level
file object, the same type returned by the built-in open() function.
Thus, to read n bytes from a pipe p created with os.popen(), you need to
use p.read(n)."
How do I access the serial (RS232) port?¶,"For Win32, OSX, Linux, BSD, Jython, IronPython:
https://pypi.org/project/pyserial/
For Unix, see a Usenet post by Mitch Chapman:
https://groups.google.com/groups?selm=34A04430.CF9@ohioee.com"
"Why doesnt closing sys.stdout (stdin, stderr) really close it?¶","Python file objects are a high-level layer of
abstraction on low-level C file descriptors.
For most file objects you create in Python via the built-in open()
function, f.close() marks the Python file object as being closed from
Pythons point of view, and also arranges to close the underlying C file
descriptor.  This also happens automatically in fs destructor, when
f becomes garbage.
But stdin, stdout and stderr are treated specially by Python, because of the
special status also given to them by C.  Running sys.stdout.close() marks
the Python-level file object as being closed, but does not close the
associated C file descriptor.
To close the underlying C file descriptor for one of these three, you should
first be sure thats what you really want to do (e.g., you may confuse
extension modules trying to do I/O).  If it is, use os.close():
Or you can use the numeric constants 0, 1 and 2, respectively."
What WWW tools are there for Python?¶,"See the chapters titled Internet Protocols and Support and Internet Data Handling in the Library
Reference Manual.  Python has many modules that will help you build server-side
and client-side web systems.
A summary of available frameworks is maintained by Paul Boddie at
https://wiki.python.org/moin/WebProgramming.
Cameron Laird maintains a useful set of pages about Python web technologies at
https://web.archive.org/web/20210224183619/http://phaseit.net/claird/comp.lang.python/web_python.
I would like to retrieve web pages that are the result of POSTing a form. Is
there existing code that would let me do this easily?
Yes. Heres a simple example that uses urllib.request:
Note that in general for percent-encoded POST operations, query strings must be
quoted using urllib.parse.urlencode().  For example, to send
name=Guy Steele, Jr.:
See also
HOWTO Fetch Internet Resources Using The urllib Package for extensive examples.
You can find a collection of useful links on the Web Programming wiki page.
Use the standard library module smtplib.
Heres a very simple interactive mail sender that uses it.  This method will
work on any host that supports an SMTP listener.
A Unix-only alternative uses sendmail.  The location of the sendmail program
varies between systems; sometimes it is /usr/lib/sendmail, sometimes
/usr/sbin/sendmail.  The sendmail manual page will help you out.  Heres
some sample code:
The select module is commonly used to help with asynchronous I/O on
sockets.
To prevent the TCP connect from blocking, you can set the socket to non-blocking
mode.  Then when you do the connect(),
you will either connect immediately
(unlikely) or get an exception that contains the error number as .errno.
errno.EINPROGRESS indicates that the connection is in progress, but hasnt
finished yet.  Different OSes will return different values, so youre going to
have to check whats returned on your system.
You can use the connect_ex() method
to avoid creating an exception.
It will just return the errno value.
To poll, you can call connect_ex() again later
 0 or errno.EISCONN indicate that youre connected  or you can pass this
socket to select.select() to check if its writable.
Note
The asyncio module provides a general purpose single-threaded and
concurrent asynchronous library, which can be used for writing non-blocking
network code.
The third-party Twisted library is
a popular and feature-rich alternative."
How can I mimic CGI form submission (METHOD=POST)?¶,"I would like to retrieve web pages that are the result of POSTing a form. Is
there existing code that would let me do this easily?
Yes. Heres a simple example that uses urllib.request:
Note that in general for percent-encoded POST operations, query strings must be
quoted using urllib.parse.urlencode().  For example, to send
name=Guy Steele, Jr.:
See also
HOWTO Fetch Internet Resources Using The urllib Package for extensive examples."
What module should I use to help with generating HTML?¶,You can find a collection of useful links on the Web Programming wiki page.
How do I send mail from a Python script?¶,"Use the standard library module smtplib.
Heres a very simple interactive mail sender that uses it.  This method will
work on any host that supports an SMTP listener.
A Unix-only alternative uses sendmail.  The location of the sendmail program
varies between systems; sometimes it is /usr/lib/sendmail, sometimes
/usr/sbin/sendmail.  The sendmail manual page will help you out.  Heres
some sample code:"
How do I avoid blocking in the connect() method of a socket?¶,"The select module is commonly used to help with asynchronous I/O on
sockets.
To prevent the TCP connect from blocking, you can set the socket to non-blocking
mode.  Then when you do the connect(),
you will either connect immediately
(unlikely) or get an exception that contains the error number as .errno.
errno.EINPROGRESS indicates that the connection is in progress, but hasnt
finished yet.  Different OSes will return different values, so youre going to
have to check whats returned on your system.
You can use the connect_ex() method
to avoid creating an exception.
It will just return the errno value.
To poll, you can call connect_ex() again later
 0 or errno.EISCONN indicate that youre connected  or you can pass this
socket to select.select() to check if its writable.
Note
The asyncio module provides a general purpose single-threaded and
concurrent asynchronous library, which can be used for writing non-blocking
network code.
The third-party Twisted library is
a popular and feature-rich alternative."
Are there any interfaces to database packages in Python?¶,"Yes.
Interfaces to disk-based hashes such as DBM and GDBM are also included with standard Python.  There is also the
sqlite3 module, which provides a lightweight disk-based relational
database.
Support for most relational databases is available.  See the
DatabaseProgramming wiki page for details.
The pickle library module solves this in a very general way (though you
still cant store things like open files, sockets or windows), and the
shelve library module uses pickle and (g)dbm to create persistent
mappings containing arbitrary Python objects."
How do you implement persistent objects in Python?¶,"The pickle library module solves this in a very general way (though you
still cant store things like open files, sockets or windows), and the
shelve library module uses pickle and (g)dbm to create persistent
mappings containing arbitrary Python objects."
How do I generate random numbers in Python?¶,"The standard module random implements a random number generator.  Usage
is simple:
This returns a random floating point number in the range [0, 1).
There are also many other specialized generators in this module, such as:
randrange(a, b) chooses an integer in the range [a, b).
uniform(a, b) chooses a floating point number in the range [a, b).
normalvariate(mean, sdev) samples the normal (Gaussian) distribution.
Some higher-level functions operate on sequences directly, such as:
choice(S) chooses a random element from a given sequence.
shuffle(L) shuffles a list in-place, i.e. permutes it randomly.
Theres also a Random class you can instantiate to create independent
multiple random number generators."
How do I freeze Tkinter applications?¶,"Freeze is a tool to create stand-alone applications.  When freezing Tkinter
applications, the applications will not be truly stand-alone, as the application
will still need the Tcl and Tk libraries.
One solution is to ship the application with the Tcl and Tk libraries, and point
to them at run-time using the TCL_LIBRARY and TK_LIBRARY
environment variables.
To get truly stand-alone applications, the Tcl scripts that form the library
have to be integrated into the application as well. One tool supporting that is
SAM (stand-alone modules), which is part of the Tix distribution
(https://tix.sourceforge.net/).
Build Tix with SAM enabled, perform the appropriate call to
Tclsam_init(), etc. inside Pythons
Modules/tkappinit.c, and link with libtclsam and libtksam (you
might include the Tix libraries as well).
On platforms other than Windows, yes, and you dont even
need threads!  But youll have to restructure your I/O
code a bit.  Tk has the equivalent of Xts XtAddInput() call, which allows you
to register a callback function which will be called from the Tk mainloop when
I/O is possible on a file descriptor.  See File Handlers.
An often-heard complaint is that event handlers bound
to events with the bind() method
dont get handled even when the appropriate key is pressed.
The most common cause is that the widget to which the binding applies doesnt
have keyboard focus.  Check out the Tk documentation for the focus command.
Usually a widget is given the keyboard focus by clicking in it (but not for
labels; see the takefocus option)."
Can I have Tk events handled while waiting for I/O?¶,"On platforms other than Windows, yes, and you dont even
need threads!  But youll have to restructure your I/O
code a bit.  Tk has the equivalent of Xts XtAddInput() call, which allows you
to register a callback function which will be called from the Tk mainloop when
I/O is possible on a file descriptor.  See File Handlers."
I cant get key bindings to work in Tkinter: why?¶,"An often-heard complaint is that event handlers bound
to events with the bind() method
dont get handled even when the appropriate key is pressed.
The most common cause is that the widget to which the binding applies doesnt
have keyboard focus.  Check out the Tk documentation for the focus command.
Usually a widget is given the keyboard focus by clicking in it (but not for
labels; see the takefocus option)."
How do you declare variables in Python?,"Assign a value to a name (e.g., name = ""Alice""). Python dynamically determines the type at runtime."
What are the different data types in Python?,"Includes integers (int), floats (float), strings (str), booleans (bool), lists (list), tuples (tuple), dictionaries (dict), and sets (set)."
How do you perform basic arithmetic operations?,"Use standard mathematical operators like +, -, *, /, // (integer division), % (modulo), and ** (exponentiation)."
How can you take user input in Python?,"Use the input() function to get user input as a string. Convert it to other types with functions like int(), float()."
What are conditional statements in Python?,"Use if, elif, and else to control program flow based on conditions."
How do you create loops in Python?,Use for loops to iterate over sequences and while loops for repeated execution based on a condition.
What is a function in Python?,"A reusable block of code defined using def, followed by the function name, parameters, and the code block."
How do you pass arguments to a function?,Arguments are values passed to a function when called. You define parameters within the function definition to receive these arguments.
How can you return values from a function?,Use the return statement to send a value back from the function to the calling code.
What are lists in Python?,"Ordered, mutable collections of elements enclosed in square brackets []. Elements can be of different data types."
What are tuples in Python?,Similar to lists but immutable (cannot be changed after creation). Defined using parentheses (). Useful for data integrity and fixed-size collections.
What are dictionaries in Python?,Unordered collections of key-value pairs enclosed in curly braces {}. Keys must be unique and immutable (strings are common). Efficient for storing and accessing data by key.
What are modules and packages in Python?,Modules are Python files containing reusable code. Packages are collections of related modules organized hierarchically using directories. You import modules and functions from them.
How do you import modules in Python?,"Use the import statement followed by the module name (e.g., import math). Import specific functions using from module_name import function_name."
What is a class in Python?,A blueprint defining the properties (attributes) and functionalities (methods) of objects. You create objects (instances) from a class definition.
How do you iterate over elements in a list?,Use a for loop with the list name as the iterable object. The loop variable takes on the value of each element in the list.
How do you access elements in a list?,"Use indexing with square brackets []. The first element has index 0, the second element has index 1, and so on. Negative indexing starts from the end."
How do you slice a list?,Use colon notation : to extract a portion of the list. Specify the starting index (inclusive) and ending index (exclusive).
How do you add or remove elements from a list?,"Use methods like append() to add elements to the end, insert() to insert at a specific index, and remove() or pop() to remove elements."
How do you work with strings in Python?,"Strings are sequences of characters. You can access characters using indexing, concatenate strings with the + operator, and use various built-in string methods for manipulation (e.g., upper(), lower(), find())."
What are sets in Python?,Unordered collections of unique elements. Defined using curly braces {}. Useful for checking membership and removing duplicates.
How do you compare objects in Python?,"Use comparison operators like == (equal), != (not equal), <, >, <=, and >=. The result is a boolean value (True or False)."
How do you define and use custom data types with classes?,Classes provide a way to create blueprints for objects with attributes (variables) and methods (functions) that operate on those attributes. You define the class structure and then create instances (objects) from the class.
How do you convert between data types in Python?,"Use built-in functions like int(), float(), str(), bool() to convert between numeric types, strings, and booleans."
How can you format strings in Python?,Use f-strings (introduced in Python 3.6) or the .format() method to embed variables and expressions within strings for dynamic formatting.
How do you work with files in Python?,"Use the open() function to open a file for reading, writing, or appending. You can then use methods like read(), write(), and close() to manipulate the file content."
What are some common file handling errors in Python?,* FileNotFoundError: Occurs if the specified file doesn't exist. * PermissionError: Occurs if you lack permission to access or modify the file.
How do you handle file handling errors?,"Use try...except blocks to catch potential exceptions like FileNotFoundError and handle them gracefully (e.g., provide an error message to the user)."
What are modules for working with external data?,"Libraries like pandas and csv provide functionalities for reading and manipulating data from various file formats (CSV, Excel, etc.)."
What are some debugging techniques in Python?,Use print statements to inspect variable values during code execution. Utilize a debugger to step through code line by line and examine the program state. Employ linters and code formatters to identify potential errors and improve code readability.
What are lambda functions in Python?,"Anonymous functions defined using the lambda keyword. They are useful for short, one-line functions where you don't need a full function definition."
How do you work with dictionaries in Python?,"You can access elements using keys within square brackets []. Modify values by assigning a new value to a key. Use methods like get() to retrieve a value with a default option if the key doesn't exist, and keys(), values(), and items() to iterate over keys, values, and key-value pairs respectively."
What are comprehensions in Python?,"List, dictionary, set, or generator comprehensions provide a concise way to create these data structures in a single line of code. They involve iterating over a sequence and applying an expression or logic to create the elements."
How can you handle missing data in Python?,"Use functions like isnull() or isna() (depending on the library) to identify missing values. You can then choose to remove rows with missing data, impute (fill in) missing values with a strategy (e.g., mean, median), or handle them based on your specific analysis needs."
What are iterators and generators in Python?,"Iterators provide a way to iterate over a sequence one element at a time without creating the entire sequence in memory. Generators are a special type of iterator that can be created using the yield keyword. They generate elements on demand, making them memory-efficient for large datasets."
How do you work with regular expressions in Python?,"The re module provides functionalities for searching, matching, and manipulating text patterns using regular expressions. This is useful for data extraction, validation, and text processing tasks."
How do you load data from CSV files in Python?,"Use the pandas library's read_csv() function. You can specify options like delimiters, headers, and handling missing data."
How can you handle missing data in a pandas DataFrame?,"Use methods like dropna() to remove rows with missing values, or fillna() to impute missing values with a strategy (e.g., mean, median)."
How do you explore and get summary statistics of your data?,"Use descriptive statistics functions like describe() to get counts, means, medians, standard deviations, etc. for numeric columns."
How do you select rows and columns in a pandas DataFrame?,Use boolean indexing or methods like loc[] (label-based) and iloc[] (integer-based) for selecting specific rows and columns.
How can you filter data based on conditions?,Use boolean expressions and filtering methods like .query() or .loc[] with conditions to select specific subsets of data.
How do you create new columns or modify existing ones in a DataFrame?,"You can assign new values to columns, perform calculations, or use string manipulation methods to create new columns based on existing data."
"How do you create basic plots (scatter plots, histograms, etc.) in Python?","Use the matplotlib library or libraries like seaborn built on top of matplotlib for various plot types. You can customize plot elements like labels, titles, and colors."
How can you visualize relationships between variables?,"Use scatter plots, correlation matrices, or heatmaps to explore relationships between numeric variables."
How do you create box plots or violin plots to visualize distributions?,"These plots are helpful for visualizing the distribution of data points across categories, including potential outliers."
How do you handle categorical data in a pandas DataFrame?,You can convert categorical columns to numerical representations using techniques like label encoding or one-hot encoding.
How can you identify and potentially remove duplicate rows in a DataFrame?,Use the duplicated() method to identify duplicates and then decide to keep or remove them based on your analysis needs.
How do you cast data types of columns in a DataFrame?,"Use the astype() method to convert columns to specific data types (e.g., int, float, datetime)."
How do you sort a DataFrame by one or more columns?,"Use the sort_values() method, specifying the column(s) and sort order (ascending or descending)."
"How can you group data by a column and perform aggregation (e.g., sum, mean) on other columns?","Use the groupby() method with aggregation functions like sum(), mean(), min(), max(), etc., to summarize data by groups."
How do you merge or join DataFrames based on common columns?,Use methods like merge() or concat() to combine DataFrames based on shared keys or along specific axes.
How can you check for data quality issues like inconsistencies or outliers?,"Use descriptive statistics, visualizations (box plots, histograms), and domain knowledge to identify potential issues."
How do you handle outliers in your data?,You can winsorize outliers (cap extreme values) or remove them if justified based on analysis goals.
How can you validate data against specific rules or constraints?,Define custom functions or use libraries for data validation to ensure data adheres to expected formats or ranges.
How do you perform aggregations with custom functions in pandas?,Use the apply() method to apply user-defined functions to groups or elements within a DataFrame.
How can you use lambda functions for concise data transformations?,"Leverage lambda functions for short, one-line operations within methods like apply() or map()."
How do you handle missing values in different ways for different columns?,"You can impute missing values with different strategies (mean, median, etc.) depending on the characteristics of each column."
How do you calculate descriptive statistics for grouped data?,Use the groupby() method with descriptive statistics functions like describe() to get group-level summaries.
How can you create new features from existing ones through feature engineering?,"Techniques like binning, scaling, and feature creation based on domain knowledge can improve model performance."
How do you handle categorical features for machine learning models?,One-hot encoding or other techniques are often used to convert categorical features into numerical representations suitable for models.
How can you create time series plots to visualize trends over time?,Use libraries like pandas.plotting or matplotlib to create line charts or other visualizations for time-based data.
How do you plot distributions of categorical variables using bar charts or pie charts?,These visualizations can help understand the distribution of values within categorical variables.
How can you create heatmaps to explore relationships between multiple variables?,Heatmaps provide a visual representation of correlations or relationships between many variables simultaneously.
How do you work with dates and times in pandas DataFrames?,"Use the pd.to_datetime() function for parsing dates and times, and leverage methods for date/time manipulation and analysis."
How can you perform basic statistical analysis with libraries like SciPy?,"Utilize functions for hypothesis testing, correlations, and other statistical tests to draw conclusions from your data."
How do you integrate pandas with machine learning libraries like scikit-learn?,Pandas DataFrames provide a convenient way to structure and manipulate data for use with machine learning algorithms.
How do you handle comments or headers within a CSV file during loading?,Use the skiprows or comment arguments in read_csv() to specify how to handle these elements.
How can you parse complex data formats like JSON or Excel files?,Libraries like json or pandas.read_excel() provide functionalities for loading data from these formats.
How do you handle text encoding issues when loading data files?,"Specify the encoding (e.g., 'utf-8') in read_csv() to ensure proper character interpretation."
How do you rename columns in a DataFrame?,Use the rename() or rename_axis() methods to assign new names to columns or the index.
How can you perform string manipulation on DataFrame columns?,"Utilize string methods like str.upper(), str.replace(), etc., to clean or modify text data."
How do you handle missing values in categorical columns?,Techniques like assigning a special category for missing values or mode imputation (filling with the most frequent value) might be used.
"How can you identify and potentially correct data inconsistencies (e.g., typos)?","Use regular expressions, data validation rules, or domain knowledge to detect and fix inconsistencies."
How do you handle data outliers based on statistical tests?,Techniques like IQR (Interquartile Range) outlier detection can identify outliers for potential removal or winsorization.
"How can you validate data against external sources (e.g., APIs)?",Utilize web scraping or API calls to verify data accuracy against external sources if available.
How do you perform aggregations with custom functions on specific subsets of data?,Use boolean indexing or filtering methods with apply() to apply functions only to relevant data.
How can you chain methods in pandas for concise data manipulation?,"Many pandas methods return the modified DataFrame, allowing you to chain operations for a more concise workflow."
How do you handle hierarchical data structures in pandas DataFrames?,"MultiIndex allows representing data with multiple levels of indexing, useful for complex data organization."
"How do you calculate rolling statistics (e.g., moving averages) for time series data?",Use pandas rolling window functionality (rolling()) to calculate statistics over a window of observations.
How can you create interaction features by combining existing features?,Feature engineering techniques like creating product terms of features can capture potential interactions between variables.
How do you handle imbalanced class distributions in classification tasks?,"Techniques like oversampling, undersampling, or SMOTE (Synthetic Minority Oversampling Technique) can address class imbalance."
How can you create subplots within a single figure to compare multiple visualizations?,Use libraries like matplotlib.pyplot.subplots() to create grids of subplots for detailed comparisons.
"How do you customize plot elements like legends, annotations, and color schemes?",Utilize various methods provided by plotting libraries to enhance the visual clarity and communication of your plots.
How can you create interactive visualizations with libraries like Bokeh or Plotly?,These libraries enable creating dynamic and user-interactable visualizations for data exploration.
How do you work with missing data in libraries like scikit-learn?,"Some scikit-learn algorithms have built-in mechanisms for handling missing values (e.g., imputing with mean)."
How can you perform feature scaling or normalization before feeding data to machine learning models?,Libraries like scikit-learn's StandardScaler or MinMaxScaler can be used to normalize features to a specific range.
"How do you evaluate the performance of machine learning models with metrics like accuracy, precision, recall, F1-score?","Utilize scikit-learn's metrics module (e.g., accuracy_score, precision_score, recall_score, f1_score) to assess model performance."
How can you version control your code and data using tools like Git?,"Version control systems like Git help track changes, collaborate effectively, and revert to previous versions if needed."
How do you write unit tests for your data analysis code to ensure correctness?,Utilize testing frameworks like unittest or pytest to write unit tests that verify the functionality of your code.
How can you document your data analysis process for reproducibility and clarity?,"Use comments, notebooks (Jupyter Notebook), or dedicated documentation tools to capture the steps and rationale behind your analysis."
"How do you optimize your data analysis code for performance, especially with large datasets?","Techniques like vectorization (using NumPy arrays), efficient data structures, and memory management can improve performance."
How do you perform exploratory data analysis (EDA) to understand the characteristics of your data?,"Utilize visualizations, summary statistics, and domain knowledge to gain insights into data patterns and relationships."
How can you handle high-dimensional data with techniques like dimensionality reduction?,Techniques like Principal Component Analysis (PCA) can reduce the number of features while preserving most of the information.
How do you perform time series analysis to forecast future trends or identify patterns?,Libraries like statsmodels or ARIMA can be used for time series modeling and forecasting.
How can you create effective storytelling with data visualizations to communicate insights to stakeholders?,"Focus on clarity, conciseness, and visual design principles to ensure your visualizations effectively communicate your findings."
How do you choose the right chart type for different data types and analysis goals?,"Consider bar charts for categorical data, line charts for trends, scatter plots for relationships, etc."
How can you create color palettes and customize aesthetics for visually appealing and informative plots?,Libraries like seaborn provide pre-defined color palettes and customization options to enhance visualizations.
How can you leverage cloud platforms like Google Colab or Amazon SageMaker for data analysis?,Cloud platforms offer scalable computing resources and pre-configured environments for large-scale data processing and analysis.
How do you handle big data with distributed computing frameworks like Spark?,Frameworks like Apache Spark enable distributed processing of massive datasets across clusters of computers.
How can you use cloud storage solutions like Amazon S3 or Google Cloud Storage for data storage and access?,"Cloud storage provides scalable, secure, and cost-effective solutions for storing and accessing data."
How do you perform text analysis and natural language processing (NLP) tasks with libraries like NLTK or spaCy?,"These libraries provide functionalities for tokenization, stemming/lemmatization, sentiment analysis, and other NLP tasks on textual data."
How can you handle missing data with more sophisticated techniques like multiple imputation?,Techniques like multiple imputation create multiple plausible values for missing entries and combine them to reduce bias.
How do you perform feature selection techniques like LASSO regression or feature importance analysis to identify the most relevant features for machine learning models?,These techniques help identify features that contribute most to model performance and reduce overfitting.
How can you train and evaluate different machine learning models for classification or regression tasks?,"Utilize scikit-learn for training models, grid search for hyperparameter tuning, and cross-validation for robust evaluation."
"How do you handle imbalanced class distributions in more advanced ways, such as cost-sensitive learning?",Techniques like assigning higher costs to misclassifications of the minority class can improve model performance in imbalanced scenarios.
How can you perform model interpretability techniques like LIME or SHAP to understand how models make predictions?,These techniques provide insights into feature importance and how model predictions are influenced by different features.
"How do you work with geospatial data (e.g., latitude/longitude) for spatial analysis tasks?","Libraries like GeoPandas or folium can be used for loading, manipulating, and visualizing geospatial data."
How can you handle image data with libraries like OpenCV or scikit-image for tasks like object detection or image classification?,"These libraries provide tools for image processing, feature extraction, and building computer vision models."
"How do you work with network data (e.g., social networks) for graph analysis tasks?",Libraries like NetworkX enable analyzing relationships and structures within network data.
How can you ensure data privacy and security when working with sensitive data?,"Implement anonymization, encryption, and access control measures to protect sensitive data."
How do you avoid bias in data analysis by considering fairness and ethical implications?,"Be aware of potential biases in data collection, feature engineering, and model selection, and strive for fairness in your analysis."
How can you document and explain your data analysis process to ensure transparency and reproducibility?,"Maintain clear documentation and code comments, and consider using tools like Jupyter Notebook for interactive and reproducible analysis."
How can you perform ensemble learning techniques like Random Forests or Gradient Boosting to improve model robustness and performance?,"By combining predictions from multiple weak learners, these techniques can achieve better performance than individual models."
How do you handle overfitting and underfitting in machine learning models?,"Techniques like regularization (e.g., L1/L2 regularization), early stopping, and data augmentation can help prevent overfitting and improve model generalization."
"How can you perform hyperparameter tuning (e.g., using grid search or randomized search) to optimize model performance?",Systematically trying different hyperparameter combinations helps find the best configuration for your model.
How do you build and train deep learning models with frameworks like TensorFlow or PyTorch for tasks like image recognition or natural language processing?,These frameworks provide tools for building and training complex neural networks for various deep learning applications.
"How can you utilize pre-trained deep learning models (e.g., VGG16, ResNet) for transfer learning tasks?","By leveraging pre-trained models and fine-tuning them on your specific data, you can achieve good performance even with limited datasets."
How do you interpret and debug deep learning models to understand their behavior and identify potential issues?,Techniques like visualization of activations and attention mechanisms can provide insights into how deep learning models learn and make predictions.
How can you use data analysis to identify customer segments or target audiences for marketing campaigns?,Techniques like customer segmentation and clustering can help identify distinct customer groups with specific characteristics.
How do you perform A/B testing to evaluate the effectiveness of different marketing campaigns or website designs?,"By splitting your audience and presenting different options, A/B testing helps identify statistically significant improvements."
How can you leverage data analysis for risk management and fraud detection in financial applications?,Techniques like anomaly detection and fraud scoring models can help identify unusual patterns and potential fraudulent activities.
"How can you collaborate effectively with data scientists, domain experts, and stakeholders throughout the data analysis lifecycle?","Open communication, clear documentation, and understanding each other's expertise are crucial for successful data analysis projects."
How do you communicate data analysis findings to non-technical audiences in a clear and concise way?,"Use storytelling techniques, visualization aids, and focus on key insights to effectively communicate your findings to a broader audience."
How can you stay up-to-date with the latest trends and advancements in data analysis tools and techniques?,"Participate in online communities, follow industry publications, and continuously learn new skills to stay relevant in the evolving data analysis landscape."
What is Python?,"Python is a high-level, interpreted programming language."
What is PEP 8?,PEP 8 is a style guide for Python code.
What is a decorator in Python?,A decorator is a design pattern in Python that allows a user to add new functionality to an existing object without modifying its structure.
What is the difference between lists and tuples in Python?,"Lists are mutable, whereas tuples are immutable."
What is a module in Python?,A module is a file containing Python definitions and statements. The file name is the module name with the suffix .py.
What is a lambda function in Python?,A lambda function is a small anonymous function defined using the lambda keyword.
What is a virtual environment in Python?,"A virtual environment is a self-contained directory tree that contains a Python installation for a particular version of Python, plus a number of additional packages."
What is the purpose of the __init__.py file in Python?,The __init__.py file is required to make Python treat directories containing the file as packages.
What is a list comprehension in Python?,"A list comprehension is a compact way to create lists in Python. It consists of brackets containing an expression followed by a for clause, then zero or more for or if clauses."
What is the difference between '==' and 'is' in Python?,"'==' checks for equality of values, whereas 'is' checks for equality of identities."
What is a generator in Python?,A generator in Python is a function that returns an iterator object which can be used to generate a sequence of values lazily.
What is the purpose of the 'self' parameter in Python?,The 'self' parameter in Python is used to represent the instance of the class. It allows access to the attributes and methods of the class within the class definition.
What is the difference between 'append()' and 'extend()' methods in Python?,"'append()' adds its argument as a single element to the end of the list, while 'extend()' iterates over its argument adding each element to the list, extending it. "
What is the purpose of the 'if __name__ == '__main__':' statement in Python?,"The 'if __name__ == '__main__':' statement in Python is used to execute some code only if the script is run directly, not if it is imported as a module."
What is the purpose of the 'with' statement in Python?,The 'with' statement in Python is used to wrap the execution of a block of code within methods defined by a context manager. It ensures that clean-up code is executed in case of exceptions.
What is the purpose of the 'pass' statement in Python?,The 'pass' statement in Python is a null operation; nothing happens when it is executed. It is used as a placeholder when a statement is syntactically required but you do not want any code to execute.
What is the purpose of the 'super()' function in Python?,The 'super()' function in Python is used to call methods and access properties from the parent class within a subclass.
What are exceptions in Python?,"Exceptions in Python are errors that occur during execution of a program. They can be handled using try, except blocks."
What is the purpose of the 'finally' block in Python?,"The 'finally' block in Python is used to execute cleanup code, regardless of whether an exception has occurred or not. It is usually used to release external resources."
What is the purpose of the 'del' statement in Python?,The 'del' statement in Python is used to delete objects. It can also be used to delete items from a list or dictionary.
What is the purpose of the 'break' statement in Python?,The 'break' statement in Python is used to exit the loop prematurely. It terminates the current loop and resumes execution at the next statement after the loop.
What is the purpose of the 'continue' statement in Python?,The 'continue' statement in Python is used to skip the rest of the code inside a loop for the current iteration and proceed to the next iteration.
What is the purpose of the 'range()' function in Python?,"The 'range()' function in Python is used to generate a sequence of numbers. It can take one, two, or three arguments specifying the start, stop, and step values respectively."
What is the purpose of the 'enumerate()' function in Python?,The 'enumerate()' function in Python is used to iterate over a sequence while keeping track of the index of the current item.
What is the purpose of the 'map()' function in Python?,The 'map()' function in Python is used to apply a function to all the elements in a given iterable and return a new iterable with the results.
What is the purpose of the 'filter()' function in Python?,The 'filter()' function in Python is used to construct an iterator from elements of an iterable for which a function returns true.
What is the purpose of the 'zip()' function in Python?,The 'zip()' function in Python is used to combine two or more iterables into a single iterable of tuples.
What is the purpose of the 'sorted()' function in Python?,The 'sorted()' function in Python is used to return a new sorted list from the elements of any iterable.
What is the purpose of the 'reversed()' function in Python?,The 'reversed()' function in Python is used to reverse the elements of a sequence.
What is the purpose of the 'isinstance()' function in Python?,The 'isinstance()' function in Python is used to check if an object is an instance of a specified class or of a subclass of that class.
What is the purpose of the 'getattr()' function in Python?,"The 'getattr()' function in Python is used to get the value of an attribute of an object. If the attribute is not found, it returns a default value."
What is the purpose of the 'setattr()' function in Python?,The 'setattr()' function in Python is used to set the value of an attribute of an object.
What is the purpose of the 'delattr()' function in Python?,The 'delattr()' function in Python is used to delete an attribute of an object.
What is the purpose of the 'locals()' function in Python?,The 'locals()' function in Python returns a dictionary containing the variables defined in the local namespace.
What is the purpose of the 'globals()' function in Python?,The 'globals()' function in Python returns a dictionary containing the variables defined in the global namespace.
What is the purpose of the 'format()' method in Python?,The 'format()' method in Python is used to format a string using curly braces as placeholders.
What is the purpose of the 'join()' method in Python?,The 'join()' method in Python is used to join the elements of a sequence into a string.
What is the purpose of the 'split()' method in Python?,The 'split()' method in Python is used to split a string into a list of substrings.
What is the purpose of the 'strip()' method in Python?,The 'strip()' method in Python is used to remove leading and trailing whitespace characters from a string.
What is the purpose of the 'replace()' method in Python?,The 'replace()' method in Python is used to replace occurrences of a substring within a string with another substring.
What is the purpose of the 'find()' method in Python?,The 'find()' method in Python is used to find the first occurrence of a substring within a string.
What is the purpose of the 'index()' method in Python?,The 'index()' method in Python is used to find the index of the first occurrence of a substring within a string.
What is the purpose of the 'count()' method in Python?,The 'count()' method in Python is used to count the number of occurrences of a substring within a string.
What is the purpose of the 'lower()' method in Python?,The 'lower()' method in Python is used to convert all characters in a string to lowercase.
What is the purpose of the 'upper()' method in Python?,The 'upper()' method in Python is used to convert all characters in a string to uppercase.
What is the purpose of the 'title()' method in Python?,The 'title()' method in Python is used to convert the first character of each word in a string to uppercase and the rest to lowercase.
What is the purpose of the 'startswith()' method in Python?,The 'startswith()' method in Python is used to check if a string starts with a specified substring.
What is the purpose of the 'endswith()' method in Python?,The 'endswith()' method in Python is used to check if a string ends with a specified substring.
What is the purpose of the 'isdigit()' method in Python?,The 'isdigit()' method in Python is used to check if all characters in a string are digits.
What is the purpose of the 'isalpha()' method in Python?,The 'isalpha()' method in Python is used to check if all characters in a string are alphabetic.
What is the purpose of the 'try' and 'except' blocks in Python?,"The 'try' and 'except' blocks in Python are used for exception handling. Code inside the 'try' block is executed, and if an exception occurs, the code inside the 'except' block is executed."
What is the purpose of a docstring in Python?,"A docstring is a string literal that occurs as the first statement in a module, function, class, or method definition. It is used to provide documentation about the purpose and usage of the code."
What is a context manager in Python?,A context manager in Python is an object that is used to manage resources and perform setup and teardown operations within a 'with' statement context.
What is the purpose of the 'yield' keyword in Python?,"The 'yield' keyword in Python is used to return a value from a generator function. It suspends the function's execution and retains its state, allowing it to resume from where it left off when called again."
What is the purpose of the 'os' module in Python?,"The 'os' module in Python provides functions for interacting with the operating system. It allows you to perform tasks such as file manipulation, directory operations, and process management."
What is the purpose of the 'sys' module in Python?,The 'sys' module in Python provides access to some variables used or maintained by the interpreter and to functions that interact strongly with the interpreter.
What is the purpose of the 'pickle' module in Python?,"The 'pickle' module in Python is used for serializing and deserializing Python objects. It converts a Python object into a byte stream, which can be saved to a file or transmitted over a network, and then reconstructed into a Python object."
What is the purpose of the 'json' module in Python?,The 'json' module in Python is used for encoding and decoding JSON data. It allows you to convert Python objects into JSON strings and vice versa.
What is the purpose of the 'heapq' module in Python?,The 'heapq' module in Python provides heap-based priority queue functionality. It allows you to efficiently insert and remove elements from a list while maintaining the heap invariant.
What is the purpose of the 'logging' module in Python?,"The 'logging' module in Python provides a flexible framework for emitting log messages from Python programs. It allows you to configure logging behavior, including log levels, output destinations, and message formatting."
What is the purpose of the 'collections' module in Python?,"The 'collections' module in Python provides specialized container datatypes that are alternatives to the built-in container types. It includes classes such as 'namedtuple', 'deque', 'Counter', and 'defaultdict'."
What is the purpose of the 'functools' module in Python?,"The 'functools' module in Python provides higher-order functions and operations on callable objects. It includes functions such as 'partial', 'reduce', 'wraps', and 'total_ordering'."
What is the purpose of the 'itertools' module in Python?,"The 'itertools' module in Python provides functions for creating iterators for efficient looping. It includes functions such as 'count', 'cycle', 'chain', and 'product'."
What is the purpose of the 'random' module in Python?,"The 'random' module in Python provides functions for generating pseudo-random numbers. It allows you to perform tasks such as random number generation, shuffling sequences, and selecting random elements."
What is the purpose of the 'time' module in Python?,"The 'time' module in Python provides functions for working with time-related tasks. It allows you to perform tasks such as getting the current time, sleeping for a specified duration, and measuring time intervals."
What is the purpose of the 'datetime' module in Python?,"The 'datetime' module in Python provides classes for working with dates and times. It allows you to perform tasks such as creating datetime objects, formatting dates and times, and performing date arithmetic."
What is the purpose of the 'os.path' module in Python?,"The 'os.path' module in Python provides functions for working with file and directory paths. It allows you to perform tasks such as joining and splitting paths, checking for file existence, and getting file attributes."
What is the purpose of the 're' module in Python?,"The 're' module in Python provides support for regular expressions. It allows you to perform tasks such as pattern matching, searching, and substitution within strings."
What is the purpose of the 'sqlite3' module in Python?,"The 'sqlite3' module in Python provides a simple and easy-to-use interface for working with SQLite databases. It allows you to perform tasks such as connecting to databases, executing SQL queries, and fetching results."
What is the purpose of the 'csv' module in Python?,The 'csv' module in Python provides functionality for reading and writing CSV files. It allows you to parse CSV data into Python data structures and vice versa.
What is the purpose of the 'argparse' module in Python?,"The 'argparse' module in Python provides a mechanism for parsing command-line arguments. It allows you to define command-line interfaces with options, arguments, and subcommands."
What is the purpose of the 'unittest' module in Python?,"The 'unittest' module in Python provides a framework for writing and running unit tests. It allows you to define test cases, test suites, and test runners for automated testing of Python code."
What is the purpose of the 'doctest' module in Python?,The 'doctest' module in Python provides a framework for running tests embedded in docstrings. It allows you to write tests alongside documentation and verify that the examples in the documentation are correct.
What is the purpose of the 'multiprocessing' module in Python?,"The 'multiprocessing' module in Python provides support for parallel processing. It allows you to create and manage processes, share data between processes, and synchronize access to shared resources."
What is the purpose of the 'threading' module in Python?,"The 'threading' module in Python provides support for concurrent programming using threads. It allows you to create and manage threads, synchronize access to shared resources, and coordinate the execution of multiple threads."
What is the purpose of the 'asyncio' module in Python?,"The 'asyncio' module in Python provides support for asynchronous I/O, concurrency, and event loop programming. It allows you to write asynchronous code using coroutines and manage event-driven programs."
What is the purpose of the 'requests' module in Python?,"The 'requests' module in Python provides a simple and elegant way to send HTTP requests and handle responses. It allows you to perform tasks such as making GET and POST requests, sending headers and cookies, and handling authentication."
What is the purpose of the 'Beautiful Soup' library in Python?,"The 'Beautiful Soup' library in Python provides tools for web scraping and parsing HTML and XML documents. It allows you to navigate the parse tree, extract data from HTML elements, and manipulate HTML content."
What is the purpose of the 'Pandas' library in Python?,"The 'Pandas' library in Python provides high-performance data structures and data analysis tools. It allows you to work with structured data such as tables and time series, perform data manipulation and aggregation, and generate plots and visualizations."
What is the purpose of the 'NumPy' library in Python?,"The 'NumPy' library in Python provides support for numerical computing and multidimensional arrays. It allows you to perform tasks such as array manipulation, mathematical operations, linear algebra, and random number generation."
What is the purpose of the 'SciPy' library in Python?,"The 'SciPy' library in Python provides scientific and technical computing tools built on top of NumPy. It allows you to perform tasks such as optimization, integration, interpolation, and signal processing."
What is the purpose of the 'Matplotlib' library in Python?,"The 'Matplotlib' library in Python provides tools for creating static, interactive, and animated visualizations. It allows you to generate plots, charts, histograms, and other types of graphs for data analysis and presentation."
What is the purpose of the 'Seaborn' library in Python?,The 'Seaborn' library in Python provides high-level functions for creating informative and attractive statistical graphics. It allows you to generate complex visualizations with minimal code and customize the appearance and style of plots.
What is the purpose of the 'TensorFlow' library in Python?,"The 'TensorFlow' library in Python provides tools for building and training deep learning models. It allows you to create neural networks, define computational graphs, and optimize model parameters using gradient descent and other optimization algorithms."
What is the purpose of the 'PyTorch' library in Python?,"The 'PyTorch' library in Python provides tools for building and training deep learning models. It allows you to create dynamic computational graphs, define neural network architectures, and optimize model parameters using automatic differentiation and gradient-based optimization."
What is the purpose of the 'Keras' library in Python?,"The 'Keras' library in Python provides a high-level neural networks API that is built on top of TensorFlow, Theano, or Microsoft Cognitive Toolkit (CNTK). It allows you to build and train deep learning models with minimal code and configure models using simple, consistent interfaces."
What is the purpose of the 'NLTK' library in Python?,"The 'NLTK' library in Python provides tools for natural language processing (NLP). It allows you to work with text data, perform tasks such as tokenization, stemming, and part-of-speech tagging, and build and train NLP models."
What is the purpose of the 'Scikit-learn' library in Python?,"The 'Scikit-learn' library in Python provides tools for machine learning and data mining. It allows you to perform tasks such as classification, regression, clustering, dimensionality reduction, and model selection using simple and efficient algorithms."
What is the purpose of the 'Django' framework in Python?,"The 'Django' framework in Python provides a high-level, full-stack web development framework for building web applications. It includes features such as an ORM (Object-Relational Mapping) for database access, a template engine for generating HTML, and a built-in admin interface for managing site content."
What is the purpose of the 'Flask' framework in Python?,"The 'Flask' framework in Python provides a lightweight and flexible web development framework for building web applications. It includes features such as URL routing, request handling, and template rendering, and allows you to extend its functionality using plugins and extensions."
What is the purpose of the 'FastAPI' framework in Python?,"The 'FastAPI' framework in Python provides a high-performance web development framework for building APIs with Python. It includes features such as automatic validation and serialization of request and response data, built-in support for asynchronous programming, and automatic generation of API documentation."
What is the purpose of the 'Pygame' library in Python?,"The 'Pygame' library in Python provides tools for building multimedia applications and games. It allows you to work with graphics, audio, and input devices, and provides support for event handling, collision detection, and game physics."
What is the purpose of the 'OpenCV' library in Python?,"The 'OpenCV' library in Python provides tools for computer vision and image processing. It allows you to work with images and video streams, perform tasks such as object detection and recognition, and analyze and manipulate image data."
What is the purpose of the 'Pillow' library in Python?,"The 'Pillow' library in Python provides tools for working with images. It allows you to open, manipulate, and save images in various formats, perform operations such as resizing and cropping, and apply filters and enhancements."
What is the purpose of the 'Pygame Zero' library in Python?,"The 'Pygame Zero' library in Python provides a simplified framework for building games with Pygame. It includes features such as built-in game loops, event handling, and sprite management, and allows you to focus on game logic and design without worrying about boilerplate code."
What is the purpose of the 'pySerial' library in Python?,"The 'pySerial' library in Python provides tools for serial communication with external devices. It allows you to connect to and communicate with devices such as microcontrollers, sensors, and other hardware components using serial ports."
What is the purpose of the 'pip' tool in Python?,"The 'pip' tool in Python is used for installing and managing Python packages. It allows you to easily install, upgrade, and remove packages from the Python Package Index (PyPI) and other package repositories."
What is the purpose of the 'virtualenv' tool in Python?,The 'virtualenv' tool in Python is used to create isolated Python environments. It allows you to install packages and dependencies for a project without affecting other projects or the system-wide Python installation.
What is the purpose of the 'venv' module in Python?,The 'venv' module in Python is used to create lightweight virtual environments. It provides functionality similar to 'virtualenv' but is included in the Python standard library starting from Python 3.3.
What is the purpose of the 'pdb' module in Python?,"The 'pdb' module in Python is a built-in debugger that allows you to interactively debug Python programs. It provides commands for setting breakpoints, inspecting variables, and stepping through code execution."
What is the purpose of the 'pytest' framework in Python?,"The 'pytest' framework in Python is a testing framework that simplifies writing and executing unit tests. It provides features such as automatic test discovery, fixture support, and parameterized testing."
What is the purpose of the 'tox' tool in Python?,"The 'tox' tool in Python is used for testing and packaging Python projects. It allows you to define and execute test environments for different Python versions and dependencies, ensuring compatibility and consistency across platforms."
What is the purpose of the 'Sphinx' tool in Python?,"The 'Sphinx' tool in Python is a documentation generator that simplifies writing and publishing documentation for Python projects. It allows you to write documentation in reStructuredText format and generate various output formats such as HTML, PDF, and ePub."
What is the purpose of the 'Cython' tool in Python?,"The 'Cython' tool in Python is a compiler that allows you to write C extensions for Python. It combines the ease of Python with the speed of C, enabling you to optimize performance-critical code."
What is the purpose of the 'PyInstaller' tool in Python?,"The 'PyInstaller' tool in Python is used to package Python applications into standalone executables. It bundles the Python interpreter, your code, and any dependencies into a single executable file, making it easy to distribute and run your application on other systems."
What is the purpose of the 'pyenv' tool in Python?,The 'pyenv' tool in Python is used for managing multiple Python installations on a single machine. It allows you to easily switch between different versions of Python and manage dependencies for different projects.
What is the purpose of the 'pdb++' module in Python?,"The 'pdb++' module in Python is an enhanced version of the built-in debugger ('pdb'). It provides additional features such as syntax highlighting, tab completion, and integration with IPython."
What is the purpose of the 'IPython' tool in Python?,"The 'IPython' tool in Python is an interactive shell for Python programming. It provides features such as tab completion, syntax highlighting, and support for interactive data visualization and exploration."
What is the purpose of the 'Jupyter Notebook' tool in Python?,"The 'Jupyter Notebook' tool in Python is a web-based interactive computing environment for creating and sharing documents that contain live code, equations, visualizations, and explanatory text. It supports various programming languages, including Python."
What is the purpose of the 'Anaconda' distribution in Python?,"The 'Anaconda' distribution in Python is a free and open-source distribution of Python and R programming languages for scientific computing. It includes a package manager ('conda') and a collection of over 1,500 data science packages for data analysis, machine learning, and visualization."
What is the purpose of the 'NumPydoc' tool in Python?,"The 'NumPydoc' tool in Python is a documentation generator specifically designed for NumPy projects. It allows you to automatically generate documentation for NumPy functions, classes, and modules using docstrings."
What is the purpose of the 'pipenv' tool in Python?,"The 'pipenv' tool in Python is used to manage dependencies and virtual environments for Python projects. It combines the functionality of 'pip' and 'virtualenv' into a single tool, making it easier to create and manage project environments."
What is the purpose of the 'black' tool in Python?,The 'black' tool in Python is a code formatter that automatically formats Python code according to the Black code style. It ensures consistent and readable code by applying strict formatting rules.
What is the purpose of the 'flake8' tool in Python?,"The 'flake8' tool in Python is a code linter that checks Python code for style and syntax errors. It combines several code quality tools (such as 'pycodestyle', 'pyflakes', and 'mccabe') into a single tool, making it easy to enforce coding standards and conventions."
What is the purpose of the 'mypy' tool in Python?,"The 'mypy' tool in Python is a static type checker that analyzes Python code and detects type errors. It allows you to annotate function signatures and variable types with type hints, enabling you to catch type-related bugs early in the development process."
What is the purpose of the 'pylint' tool in Python?,"The 'pylint' tool in Python is a code analysis tool that checks Python code for errors, potential bugs, and code smells. It enforces coding conventions, detects unused variables and imports, and provides suggestions for improving code quality."
What is the purpose of the 'pytest-cov' plugin in Python?,"The 'pytest-cov' plugin in Python is used to generate test coverage reports for Python code. It integrates with the 'pytest' framework to collect coverage data during test execution and generates reports in various formats (such as HTML, XML, and terminal output)."
What is the purpose of the 'pytest-django' plugin in Python?,"The 'pytest-django' plugin in Python is used to write and run tests for Django applications using the 'pytest' framework. It provides fixtures and utilities for setting up Django projects, loading fixtures, and testing Django-specific functionality."
What is the purpose of the 'pytest-html' plugin in Python?,"The 'pytest-html' plugin in Python is used to generate HTML reports for test results produced by the 'pytest' framework. It generates a detailed report with information about test outcomes, durations, and captured output, making it easier to analyze and share test results."
What is the purpose of the 'pytest-xdist' plugin in Python?,"The 'pytest-xdist' plugin in Python is used to parallelize test execution with the 'pytest' framework. It allows you to distribute tests across multiple CPUs or machines, reducing test execution time and increasing overall productivity."
What is the purpose of the 'pytest-flask' plugin in Python?,"The 'pytest-flask' plugin in Python is used to write and run tests for Flask applications using the 'pytest' framework. It provides fixtures and utilities for setting up Flask applications, making requests, and testing Flask-specific functionality."
What is the purpose of the 'pytest-selenium' plugin in Python?,The 'pytest-selenium' plugin in Python is used to write and run browser-based tests using the 'pytest' framework. It provides fixtures and utilities for controlling web browsers (such as Chrome and Firefox) and interacting with web pages using Selenium WebDriver.
What is the purpose of the 'pytest-mock' plugin in Python?,"The 'pytest-mock' plugin in Python is used to write and run tests for code that uses mocking and patching with the 'pytest' framework. It provides fixtures and utilities for creating and managing mock objects, allowing you to isolate code under test and simulate behavior of external dependencies."
What is the purpose of the 'pytest-asyncio' plugin in Python?,"The 'pytest-asyncio' plugin in Python is used to write and run asynchronous tests with the 'pytest' framework. It provides fixtures and utilities for working with coroutines, asynchronous context managers, and event loops, allowing you to test asynchronous code in a synchronous environment."
What is the purpose of the 'pytest-benchmark' plugin in Python?,"The 'pytest-benchmark' plugin in Python is used to benchmark the performance of Python code with the 'pytest' framework. It provides fixtures and utilities for measuring execution time, memory usage, and other performance metrics, allowing you to identify bottlenecks and optimize code."
What is the purpose of the 'pytest-parametrize' plugin in Python?,"The 'pytest-parametrize' plugin in Python is used to parametrize tests with the 'pytest' framework. It allows you to define test functions with multiple sets of input parameters and expected outcomes, reducing code duplication and making it easier to write and maintain tests."
What is the purpose of the 'pytest-repeat' plugin in Python?,"The 'pytest-repeat' plugin in Python is used to repeat tests with the 'pytest' framework. It allows you to specify the number of times a test should be repeated, making it easier to detect intermittent failures and ensure test reliability."
What is the purpose of the 'pytest-ordering' plugin in Python?,"The 'pytest-ordering' plugin in Python is used to order tests with the 'pytest' framework. It allows you to specify the order in which tests should be executed, ensuring that tests are run in a predictable and consistent manner."
What is the purpose of the 'pytest-timeout' plugin in Python?,"The 'pytest-timeout' plugin in Python is used to set timeouts for tests with the 'pytest' framework. It allows you to specify a maximum duration for test execution, automatically failing tests that exceed the timeout limit."
What is the purpose of the 'pytest-flake8' plugin in Python?,"The 'pytest-flake8' plugin in Python is used to check code style with the 'pytest' framework. It integrates the Flake8 code linter with the 'pytest' framework, allowing you to enforce coding conventions and catch syntax errors and code smells during test execution."
What is the purpose of the 'pytest-metadata' plugin in Python?,"The 'pytest-metadata' plugin in Python is used to add metadata to test reports with the 'pytest' framework. It allows you to specify custom metadata (such as author, description, and environment) for tests, making it easier to categorize and filter test results and analyze test coverage."
What is the purpose of the 'pytest-randomly' plugin in Python?,"The 'pytest-randomly' plugin in Python is used to randomize test execution order with the 'pytest' framework. It shuffles the order of tests before execution, helping to identify test dependencies and reduce the likelihood of order-related failures, making it easier to identify and fix flaky tests."
What is the purpose of the 'pytest-xvfb' plugin in Python?,"The 'pytest-xvfb' plugin in Python is used to run headless browser tests with the 'pytest' framework. It provides fixtures and utilities for setting up and managing virtual display servers (such as Xvfb), allowing you to run browser tests in a headless environment, making it easier to automate GUI testing."
What is the purpose of the 'pytest-picked' plugin in Python?,"The 'pytest-picked' plugin in Python is used to run selected tests with the 'pytest' framework. It allows you to mark tests with custom markers and run only selected tests based on the markers, making it easier to focus on specific test cases and scenarios during development and debugging."
What is the purpose of the 'pytest-forked' plugin in Python?,"The 'pytest-forked' plugin in Python is used to run tests in isolated processes with the 'pytest' framework. It forks a new process for each test module, preventing test contamination and providing better isolation and stability, making it easier to detect and diagnose test failures."
What is the purpose of the 'pytest-logger' plugin in Python?,"The 'pytest-logger' plugin in Python is used to capture and analyze log messages from tests with the 'pytest' framework. It redirects log output to the test report, allowing you to inspect log messages and identify issues during test execution, making it easier to diagnose and debug test failures."
What is the purpose of the 'pytest-order' plugin in Python?,"The 'pytest-order' plugin in Python is used to order tests with the 'pytest' framework. It allows you to specify the order in which tests should be executed, ensuring that tests are run in a predictable and consistent manner, making it easier to reproduce and troubleshoot test failures."
What is the purpose of the 'pytest-junitxml' plugin in Python?,"The 'pytest-junitxml' plugin in Python is used to generate JUnit-compatible XML reports for test results with the 'pytest' framework. It generates a structured report that can be consumed by various CI/CD systems and testing tools, making it easier to integrate pytest with existing development workflows and toolchains."
What is the purpose of the 'pytest-factoryboy' plugin in Python?,"The 'pytest-factoryboy' plugin in Python is used to integrate Factory Boy fixtures with the 'pytest' framework. It provides utilities for defining and using Factory Boy factories in test functions, making it easier to create and manage test data."
What is the purpose of the 'pytest-parameterized' plugin in Python?,"The 'pytest-parameterized' plugin in Python is used to parametrize tests with the 'pytest' framework. It allows you to define test functions with multiple sets of input parameters and expected outcomes, reducing code duplication and making it easier to write and maintain tests."
What is the purpose of the 'pytest-azurepipelines' plugin in Python?,"The 'pytest-azurepipelines' plugin in Python is used to integrate pytest with Azure Pipelines. It provides utilities for generating test result files compatible with Azure Pipelines, allowing you to incorporate pytest-based testing into your CI/CD pipeline."
What is the purpose of the 'pytest-datadir' plugin in Python?,"The 'pytest-datadir' plugin in Python is used to manage test data files with the 'pytest' framework. It provides fixtures and utilities for accessing data directories associated with test modules, making it easier to organize and use test data files in your test suite."
What is the purpose of the 'pytest-freezegun' plugin in Python?,"The 'pytest-freezegun' plugin in Python is used to mock the system time with the 'pytest' framework. It provides fixtures and utilities for freezing and manipulating the current time during test execution, allowing you to write deterministic tests for time-dependent code."
What is the purpose of the 'pytest-pylint' plugin in Python?,"The 'pytest-pylint' plugin in Python is used to run Pylint checks with the 'pytest' framework. It integrates the Pylint code analyzer with the 'pytest' framework, allowing you to enforce coding standards and identify potential issues in your codebase during test execution."
What is the purpose of the 'pytest-timeit' plugin in Python?,"The 'pytest-timeit' plugin in Python is used to measure the execution time of test functions with the 'pytest' framework. It provides fixtures and utilities for profiling test execution time, allowing you to identify performance bottlenecks and optimize slow tests."
What is the purpose of the 'pytest-regressions' plugin in Python?,"The 'pytest-regressions' plugin in Python is used to manage regression tests with the 'pytest' framework. It provides fixtures and utilities for comparing outputs of current test runs with reference outputs stored in regression test directories, helping to detect unintended changes or regressions in your codebase."
What is the purpose of the 'pytest-variables' plugin in Python?,"The 'pytest-variables' plugin in Python is used to manage test configuration variables with the 'pytest' framework. It allows you to define and override configuration variables using command-line options or configuration files, making it easier to customize test behavior across different environments."
What is the purpose of the 'pytest-assertionrewrite' plugin in Python?,"The 'pytest-assertionrewrite' plugin in Python is used to rewrite assertion statements in test functions with the 'pytest' framework. It allows you to write assertions using plain Python assert statements, while still benefiting from informative failure messages and introspection capabilities provided by pytest."
What is the purpose of the 'pytest-cram' plugin in Python?,"The 'pytest-cram' plugin in Python is used to run Cram tests with the 'pytest' framework. It provides fixtures and utilities for executing Cram test files and capturing their output, allowing you to include Cram tests in your pytest-based test suite."
What is the purpose of the 'pytest-ipynb' plugin in Python?,"The 'pytest-ipynb' plugin in Python is used to test Jupyter notebooks with the 'pytest' framework. It provides fixtures and utilities for executing notebook cells and asserting their outputs, allowing you to write and run tests for Jupyter notebooks in a pytest-based test environment."
What is the purpose of the 'pytest-async-timeout' plugin in Python?,"The 'pytest-async-timeout' plugin in Python is used to set timeouts for asynchronous tests with the 'pytest' framework. It provides fixtures and utilities for specifying maximum durations for asynchronous test functions, automatically failing tests that exceed the timeout limit."
What is the purpose of the 'pytest-socket' plugin in Python?,"The 'pytest-socket' plugin in Python is used to mock network sockets with the 'pytest' framework. It provides fixtures and utilities for creating and controlling mock socket objects, allowing you to simulate network communication and test code that interacts with sockets."
What is the purpose of the 'pytest-random-order' plugin in Python?,"The 'pytest-random-order' plugin in Python is used to randomize test execution order with the 'pytest' framework. It shuffles the order of tests before execution, helping to identify test dependencies and reduce the likelihood of order-related failures, making it easier to identify and fix flaky tests."
What is the purpose of the 'pytest-instafail' plugin in Python?,"The 'pytest-instafail' plugin in Python is used to report test failures immediately with the 'pytest' framework. It displays test failures as soon as they occur, rather than waiting until the end of test execution, making it easier to identify and diagnose test failures in large test suites."
What is the purpose of the 'pytest-subtests' plugin in Python?,"The 'pytest-subtests' plugin in Python is used to support subtests with the 'pytest' framework. It provides fixtures and utilities for defining and running subtests within test functions, allowing you to group related assertions and treat them as a single test case."
What is the purpose of the 'pytest-deadfixtures' plugin in Python?,"The 'pytest-deadfixtures' plugin in Python is used to detect unused fixtures with the 'pytest' framework. It analyzes test code and reports fixtures that are defined but not used in any test functions, helping to identify and remove unnecessary fixtures."
What is the purpose of the 'pytest-testinfra' plugin in Python?,"The 'pytest-testinfra' plugin in Python is used to test server provisioning and configuration with the 'pytest' framework. It provides fixtures and utilities for executing commands on remote servers and asserting their state, making it easier to write and run infrastructure tests."
What is the purpose of the 'pytest-vcr' plugin in Python?,"The 'pytest-vcr' plugin in Python is used to record and replay HTTP interactions with the 'pytest' framework. It provides fixtures and utilities for capturing HTTP requests and responses during test execution, allowing you to create reproducible tests for code that interacts with external APIs."
How do you handle exceptions in Python?,"Exceptions in Python can be handled using try-except blocks. Code that may raise an exception is placed within the try block, and potential exceptions are caught and handled in the except block."
What is the difference between '==' and 'is' operators in Python?,"The '==' operator compares the values of two objects, while the 'is' operator checks if two objects refer to the same memory location."
How do you install third-party libraries in Python?,Third-party libraries in Python can be installed using package managers like pip. You can use the command 'pip install <library_name>' to install a library.
What are Python's built-in data types?,"Python's built-in data types include integers, floats, strings, lists, tuples, dictionaries, and sets."
How do you define a function in Python?,"Functions in Python are defined using the 'def' keyword followed by the function name and parameters, if any. The function body is then indented following the colon."
What is the purpose of the 'if' statement in Python?,The 'if' statement in Python is used for conditional execution. It allows you to execute a block of code only if a certain condition is true.
How do you iterate over a list in Python?,"You can iterate over a list in Python using a for loop. For example, 'for item in my_list:' allows you to iterate over each element in 'my_list'."
How do you open and read a file in Python?,"You can open and read a file in Python using the 'open()' function. Once opened, you can use methods like 'read()', 'readline()', or 'readlines()' to read the contents of the file."
What are list comprehensions in Python?,"List comprehensions in Python provide a concise way to create lists. They consist of an expression followed by a for clause, and can optionally include additional for or if clauses."
How do you handle file writing in Python?,"You can handle file writing in Python by opening a file in write mode ('w' or 'wb'), then using methods like 'write()' or 'writelines()' to write data to the file."
How do you remove duplicates from a list in Python?,You can remove duplicates from a list in Python by converting it to a set (which automatically removes duplicates) and then converting it back to a list.
What are decorators in Python?,Decorators in Python are functions that modify the behavior of other functions. They are commonly used to add functionality to existing functions without modifying their code.
How do you sort a list in Python?,"You can sort a list in Python using the 'sort()' method, which sorts the list in place, or the 'sorted()' function, which returns a new sorted list."
What is the purpose of the 'enumerate' function in Python?,The 'enumerate' function in Python is used to loop over an iterable while keeping track of the index of each item. It returns a tuple containing the index and the value of each item.
How do you define a class in Python?,Classes in Python are defined using the 'class' keyword followed by the class name and an optional base class. Class methods and attributes are defined within the class body.
How do you raise an exception manually in Python?,You can raise an exception manually in Python using the 'raise' keyword followed by the type of exception you want to raise.
What are modules in Python?,Modules in Python are files containing Python code that can be imported and used in other Python files. They allow you to organize code into reusable units.
What is the purpose of the '__init__' method in Python classes?,The '__init__' method in Python classes is a special method called when a new instance of the class is created. It is commonly used to initialize instance variables.
How do you concatenate strings in Python?,"You can concatenate strings in Python using the '+' operator or the 'join()' method. For example, 's1 + s2' or ''.join([s1, s2])."
How do you format strings in Python?,"You can format strings in Python using f-strings, the 'format()' method, or the '%' operator. For example, f'Hello {name}', '{}'.format(value), or '%s %d' % (string, number)."
What are generators in Python?,Generators in Python are functions that produce a sequence of values using the 'yield' keyword. They allow you to iterate over large sequences without storing the entire sequence in memory.
How do you handle missing keys in dictionaries in Python?,You can handle missing keys in dictionaries in Python using the 'get()' method or the 'defaultdict' class from the 'collections' module.
How do you reverse a list in Python?,"You can reverse a list in Python using the 'reverse()' method, which reverses the list in place, or by using slicing syntax, such as 'my_list[::-1]'."
How do you check if a key exists in a dictionary in Python?,"You can check if a key exists in a dictionary in Python using the 'in' operator or the 'get()' method. For example, 'if key in my_dict' or 'value = my_dict.get(key)'."
How do you convert a string to a list in Python?,"You can convert a string to a list in Python using the 'split()' method, which splits the string into a list of substrings based on a delimiter."
What are iterators in Python?,"Iterators in Python are objects that represent a stream of data. They implement the iterator protocol, which requires methods like '__iter__()' and '__next__()'."
How do you check if a file exists in Python?,You can check if a file exists in Python using the 'os.path.exists()' function or the 'Path.exists()' method from the 'pathlib' module.
What is the purpose of the 'global' keyword in Python?,The 'global' keyword in Python is used to declare that a variable inside a function refers to the global scope rather than the local scope.
How do you convert a list to a tuple in Python?,"You can convert a list to a tuple in Python using the 'tuple()' constructor, which creates a new tuple from the elements of the list."
What are context managers in Python?,"Context managers in Python are objects that support the context management protocol, allowing them to be used with the 'with' statement. They are commonly used to manage resources like files and locks."
How do you check if a string contains a substring in Python?,"You can check if a string contains a substring in Python using the 'in' operator or the 'find()' method. For example, 'if substring in my_string' or 'index = my_string.find(substring)'."
What is the purpose of the 'map' function in Python?,The 'map' function in Python is used to apply a function to each item in an iterable and return a new iterable with the results.
How do you round a number to a specific number of decimal places in Python?,"You can round a number to a specific number of decimal places in Python using the 'round()' function. For example, 'rounded = round(number, ndigits)' where 'ndigits' is the number of decimal places."
What are namespaces in Python?,Namespaces in Python are mappings from names to objects. They allow you to organize code into logical groups and avoid naming conflicts.
How do you check if a list is empty in Python?,You can check if a list is empty in Python by using a conditional statement such as 'if not my_list' or by checking its length with 'len(my_list) == 0'.
What is the purpose of the 'zip' function in Python?,The 'zip' function in Python is used to combine multiple iterables into a single iterable of tuples. It returns an iterator that produces tuples where the i-th tuple contains the i-th element from each of the input iterables.
How do you convert a dictionary to a list of tuples in Python?,"You can convert a dictionary to a list of tuples in Python using the 'items()' method of the dictionary, which returns a view object that can be converted to a list of key-value pairs."
How do you check if a string is a palindrome in Python?,"You can check if a string is a palindrome in Python by comparing it with its reverse. If the string is equal to its reverse, it's a palindrome."
How do you calculate the factorial of a number in Python?,"You can calculate the factorial of a number in Python using recursion or iteration. For example, a recursive function can be defined as 'def factorial(n): return 1 if n == 0 else n * factorial(n-1)'"
How do you remove whitespace from the beginning and end of a string in Python?,"You can remove whitespace from the beginning and end of a string in Python using the 'strip()' method. For example, 'trimmed_string = my_string.strip()'."
How do you convert a list to a set in Python?,"You can convert a list to a set in Python using the 'set()' constructor. For example, 'my_set = set(my_list)' creates a set from the elements of 'my_list'."
How do you check if a number is prime in Python?,"You can check if a number is prime in Python by iterating over the range from 2 to the square root of the number, checking if the number is divisible by any of the integers in that range."
How do you convert a string to lowercase in Python?,"You can convert a string to lowercase in Python using the 'lower()' method. For example, 'lowercase_string = my_string.lower()' converts 'my_string' to lowercase."
How do you generate random numbers in Python?,"You can generate random numbers in Python using the 'random' module. For example, 'import random' followed by 'random_number = random.randint(1, 10)' generates a random integer between 1 and 10."
How do you reverse a string in Python?,"You can reverse a string in Python using slicing syntax. For example, 'reversed_string = my_string[::-1]' creates a reversed version of 'my_string'."
How do you find the maximum and minimum values in a list in Python?,"You can find the maximum and minimum values in a list in Python using the 'max()' and 'min()' functions. For example, 'max_value = max(my_list)' and 'min_value = min(my_list)'"
What is the purpose of the 'try-except' statement in Python?,"The 'try-except' statement in Python is used to handle exceptions. Code that may raise an exception is placed within the 'try' block, and potential exceptions are caught and handled in the 'except' block."
How do you calculate the length of a list in Python?,"You can calculate the length of a list in Python using the 'len()' function. For example, 'list_length = len(my_list)' returns the number of elements in 'my_list'."
How do you convert a string to an integer in Python?,"You can convert a string to an integer in Python using the 'int()' constructor. For example, 'integer_value = int(my_string)' converts 'my_string' to an integer."
How do you copy a file in Python?,"You can copy a file in Python using the 'shutil' module. For example, 'import shutil' followed by 'shutil.copy(src, dst)' copies the file at 'src' to 'dst'."
What is the purpose of the 'assert' statement in Python?,The 'assert' statement in Python is used for debugging purposes. It evaluates an expression and raises an AssertionError if the expression is false.
How do you merge two dictionaries in Python?,"You can merge two dictionaries in Python using the 'update()' method or dictionary unpacking. For example, 'dict1.update(dict2)' or '{**dict1, **dict2}' merges 'dict2' into 'dict1'."
What is the purpose of the 'filter' function in Python?,The 'filter' function in Python is used to filter elements from an iterable based on a function. It returns an iterator containing the elements for which the function returns 'True'.
How do you calculate the square root of a number in Python?,"You can calculate the square root of a number in Python using the '**' operator or the 'math.sqrt()' function. For example, 'sqrt_value = my_number ** 0.5' or 'import math; sqrt_value = math.sqrt(my_number)'"
How do you check if a string starts or ends with a specific substring in Python?,"You can check if a string starts or ends with a specific substring in Python using the 'startswith()' and 'endswith()' methods. For example, 'if my_string.startswith('prefix')' or 'if my_string.endswith('suffix')'."
What is the purpose of the 'sorted' function in Python?,The 'sorted' function in Python is used to sort iterables. It returns a new sorted list from the items of the iterable.
How do you read and parse JSON data from a file in Python?,"You can read and parse JSON data from a file in Python using the 'json' module. For example, 'import json' followed by 'with open('file.json') as f: data = json.load(f)' reads JSON data from 'file.json'."
What is the purpose of the 'lambda' keyword in Python?,The 'lambda' keyword in Python is used to create anonymous functions (functions without a name). They are often used as arguments to higher-order functions like 'map()' and 'filter()'.
How do you find the index of an element in a list in Python?,"You can find the index of an element in a list in Python using the 'index()' method. For example, 'index = my_list.index(element)' returns the index of 'element' in 'my_list'."
What is the purpose of the 'chr()' and 'ord()' functions in Python?,"The 'chr()' function in Python returns the character corresponding to an ASCII value, while the 'ord()' function returns the ASCII value corresponding to a character."
How do you convert a string to uppercase in Python?,"You can convert a string to uppercase in Python using the 'upper()' method. For example, 'uppercase_string = my_string.upper()' converts 'my_string' to uppercase."
How do you remove an element from a list by value in Python?,"You can remove an element from a list by value in Python using the 'remove()' method. For example, 'my_list.remove(value)' removes the first occurrence of 'value' from 'my_list'."
What is the purpose of the 'is' keyword in Python?,"The 'is' keyword in Python is used to test for object identity (whether two variables refer to the same object). It returns 'True' if the variables refer to the same object, and 'False' otherwise."
How do you convert a list of strings to a single string in Python?,"You can convert a list of strings to a single string in Python using the 'join()' method. For example, 'joined_string = ''.join(string_list)' joins the strings in 'string_list' into a single string."
How do you find the most common element in a list in Python?,"You can find the most common element in a list in Python using the 'collections.Counter' class. For example, 'import collections; most_common = collections.Counter(my_list).most_common(1)' returns the most common element in 'my_list'."
How do you check if a number is even or odd in Python?,"You can check if a number is even or odd in Python using the modulo operator (%). For example, 'if num % 2 == 0' checks if 'num' is even, and 'if num % 2 != 0' checks if it's odd."
What is the purpose of list comprehension in Python?,List comprehension in Python provides a concise way to create lists by iterating over an iterable and applying an expression to each element.
How do you convert a string to a list of characters in Python?,"You can convert a string to a list of characters in Python using list() constructor. For example, 'char_list = list(my_string)'"
What are anonymous functions in Python?,"Anonymous functions, also known as lambda functions, are small, inline functions defined without a name using the 'lambda' keyword."
How do you merge two lists in Python?,"You can merge two lists in Python using the '+' operator. For example, 'merged_list = list1 + list2'"
What is the purpose of the 'reduce()' function in Python?,The 'reduce()' function in Python is used to apply a function to a sequence of elements and reduce them to a single value by repeatedly applying the function to the next element and the current result.
How do you flatten a nested list in Python?,"You can flatten a nested list in Python using list comprehension or recursion. For example, 'flattened_list = [item for sublist in nested_list for item in sublist]'"
How do you swap the values of two variables in Python?,"You can swap the values of two variables in Python using tuple unpacking or a temporary variable. For example, 'a, b = b, a'"
What are iterators and iterables in Python?,"Iterators in Python are objects that implement the iterator protocol, allowing them to be iterated over with a loop or used in other contexts that expect an iterable. Iterables are objects that can return an iterator."
How do you convert a list of tuples to a dictionary in Python?,"You can convert a list of tuples to a dictionary in Python using dictionary comprehension. For example, 'my_dict = {k: v for k, v in my_list}'"
How do you remove an element from a set in Python?,"You can remove an element from a set in Python using the 'remove()' method or the 'discard()' method if the element is present, or the 'pop()' method to remove and return an arbitrary element."
What is the purpose of the 'f-string' in Python?,F-strings in Python are used for string formatting. They allow you to embed expressions inside string literals by prefixing the string with 'f' or 'F'.
How do you check if two strings are anagrams in Python?,"You can check if two strings are anagrams in Python by sorting their characters and comparing the sorted strings. For example, 'is_anagram = sorted(str1) == sorted(str2)'"
How do you remove all occurrences of a value from a list in Python?,"You can remove all occurrences of a value from a list in Python using list comprehension. For example, 'my_list = [x for x in my_list if x != value]'"
What is the purpose of the 'defaultdict' class in Python?,"The 'defaultdict' class in Python is a subclass of 'dict' that provides a default value for missing keys, which is specified when the defaultdict is created."
How do you concatenate two dictionaries in Python?,"You can concatenate two dictionaries in Python using the 'update()' method. For example, 'dict1.update(dict2)' updates 'dict1' with the key-value pairs from 'dict2'."
What is the purpose of the 'any()' and 'all()' functions in Python?,"The 'any()' function in Python returns 'True' if any element in an iterable is true, and 'False' otherwise. The 'all()' function returns 'True' if all elements in an iterable are true, and 'False' otherwise."
How do you convert a list to a dictionary in Python?,"You can convert a list to a dictionary in Python using dictionary comprehension. For example, 'my_dict = {k: v for k, v in enumerate(my_list)}' creates a dictionary with the list elements as values and their indices as keys."
How do you find the intersection and union of two sets in Python?,You can find the intersection of two sets in Python using the '&' operator or the 'intersection()' method. You can find the union of two sets using the '|' operator or the 'union()' method.
What is the purpose of the 'deque' class in Python?,"The 'deque' class in Python, from the 'collections' module, is a double-ended queue that supports adding and removing elements from both ends efficiently."
How do you check if a string is numeric in Python?,You can check if a string is numeric in Python using the 'isdigit()' method or by using exception handling with 'try-except' blocks.
How do you flatten a dictionary in Python?,"You can flatten a dictionary in Python using dictionary comprehension or recursion. For example, 'flattened_dict = {k: v for sub_dict in nested_dict.values() for k, v in sub_dict.items()}'"
What is the purpose of the 'statistics' module in Python?,"The 'statistics' module in Python provides functions for mathematical statistics, such as mean, median, mode, variance, and standard deviation, for sequences of numerical data."
How do you check if a string contains only whitespace characters in Python?,You can check if a string contains only whitespace characters in Python using the 'isspace()' method.
How do you find the maximum or minimum element of a list in Python?,"You can find the maximum or minimum element of a list in Python using the 'max()' and 'min()' functions. For example, 'max_value = max(my_list)' returns the maximum value in 'my_list'."
How do you split a string into a list of substrings in Python?,"You can split a string into a list of substrings in Python using the 'split()' method. For example, 'substrings = my_string.split()' splits 'my_string' on whitespace."
How do you round a floating-point number to a specified number of decimal places in Python?,"You can round a floating-point number to a specified number of decimal places in Python using the 'round()' function. For example, 'rounded_number = round(my_float, 2)' rounds 'my_float' to 2 decimal places."
What is the purpose of the 'sys.argv' variable in Python?,"The 'sys.argv' variable in Python contains a list of command-line arguments passed to a Python script, including the script name itself."
What is the purpose of the 'sys.exit()' function in Python?,The 'sys.exit()' function in Python is used to exit the Python interpreter with a specified exit code.
How do you iterate over a dictionary in Python?,"You can iterate over a dictionary in Python using a 'for' loop or by using methods like 'keys()', 'values()', and 'items()'."
What is the purpose of the 'hash()' function in Python?,"The 'hash()' function in Python is used to generate a hash value for a given object, which is a fixed-size integer that represents the object's data."
How do you create a shallow copy of a list in Python?,"You can create a shallow copy of a list in Python using the 'copy()' method or by using slicing notation. For example, 'new_list = old_list.copy()' or 'new_list = old_list[:]'"
What is the purpose of the 'math' module in Python?,"The 'math' module in Python provides mathematical functions and constants, such as trigonometric functions, logarithms, and mathematical constants like pi and e."
How do you check if a string is empty in Python?,"You can check if a string is empty in Python by using the 'not' operator or by checking the string's length. For example, 'if not my_string:' or 'if len(my_string) == 0:'"
How do you check if a number is a prime number in Python?,You can check if a number is a prime number in Python by iterating over the numbers from 2 to the square root of the number and checking if any of them divide the number evenly.
How do you iterate over multiple lists simultaneously in Python?,"You can iterate over multiple lists simultaneously in Python using the 'zip()' function. For example, 'for item1, item2 in zip(list1, list2):'"
What is the purpose of the 'random.seed()' function in Python?,"The 'random.seed()' function in Python is used to initialize the random number generator with a specified seed value, ensuring reproducible random sequences."
How do you convert a string to an integer or float in Python?,"You can convert a string to an integer using the 'int()' function or to a float using the 'float()' function. For example, 'my_int = int(my_string)' or 'my_float = float(my_string)'"
What is the purpose of the 'collections.defaultdict' class in Python?,"The 'collections.defaultdict' class in Python is a subclass of 'dict' that provides a default value for missing keys, which is specified when the defaultdict is created."
What is the purpose of the 'os.getcwd()' function in Python?,The 'os.getcwd()' function in Python is used to get the current working directory of the Python script.
What is the purpose of the 'datetime.datetime.now()' function in Python?,The 'datetime.datetime.now()' function in Python is used to get the current date and time.
How do you sort a dictionary by its values in Python?,"You can sort a dictionary by its values in Python using the 'sorted()' function with a custom key function or using a lambda function. For example, 'sorted_dict = sorted(my_dict.items(), key=lambda x: x[1])'"
What is the purpose of the 'sys.stdin.readline()' function in Python?,The 'sys.stdin.readline()' function in Python is used to read a line of input from the standard input stream.
How do you round a floating-point number to the nearest integer in Python?,"You can round a floating-point number to the nearest integer in Python using the 'round()' function. For example, 'rounded_number = round(my_float)'"
How do you check if a file is empty in Python?,You can check if a file is empty in Python by using the 'os.stat()' function to get information about the file and checking if its size is zero.
What is the purpose of the 'functools.partial()' function in Python?,"The 'functools.partial()' function in Python is used to create partial functions with fixed arguments, allowing you to create new functions from existing ones with some arguments pre-filled."
How do you read a CSV file in Python?,"You can read a CSV file in Python using the 'csv' module's 'reader' object. For example, 'import csv' followed by 'with open('file.csv') as f: csv_reader = csv.reader(f)'"
What is the purpose of the 'os.makedirs()' function in Python?,The 'os.makedirs()' function in Python is used to create a directory and any necessary parent directories if they don't already exist.
How do you check if a number is odd or even in Python?,"You can check if a number is odd or even in Python using the modulo operator (%). For example, 'if num % 2 == 0:' checks if 'num' is even."
What is the purpose of the 'os.path.splitext()' function in Python?,The 'os.path.splitext()' function in Python is used to split a file path into its base name and extension.
How do you check if a variable is defined in Python?,"You can check if a variable is defined in Python using the 'defined()' function from the 'inspect' module. For example, 'if 'my_var' in locals():' checks if 'my_var' is defined in the local namespace."
What is the purpose of the 'collections.Counter' class in Python?,The 'collections.Counter' class in Python is a dictionary subclass for counting hashable objects. It provides methods for counting occurrences of elements in a collection.
What is the purpose of the 'os.listdir()' function in Python?,The 'os.listdir()' function in Python is used to get a list of files and directories in a specified directory.
How do you remove an item from a list by value in Python?,"You can remove an item from a list by value in Python using the 'remove()' method. For example, 'my_list.remove(value)' removes the first occurrence of 'value' from 'my_list'."
What is the purpose of the 'os.rename()' function in Python?,The 'os.rename()' function in Python is used to rename a file or directory.
How do you convert a string to lowercase or uppercase in Python?,"You can convert a string to lowercase or uppercase in Python using the 'lower()' or 'upper()' methods. For example, 'lowercase_string = my_string.lower()' or 'uppercase_string = my_string.upper()'"
What is the purpose of the 'os.path.join()' function in Python?,The 'os.path.join()' function in Python is used to join one or more path components into a single path.
"How do you check if a number is positive, negative, or zero in Python?","You can check if a number is positive, negative, or zero in Python using simple conditional statements. For example, 'if num > 0:', 'if num < 0:', and 'if num == 0:'"
What is the purpose of the 'os.path.isdir()' function in Python?,The 'os.path.isdir()' function in Python is used to check if a path refers to a directory.
How do you remove whitespace from a string in Python?,"You can remove whitespace from a string in Python using the 'strip()', 'lstrip()', or 'rstrip()' methods. For example, 'trimmed_string = my_string.strip()' removes leading and trailing whitespace."
What is the purpose of the 'os.path.exists()' function in Python?,"The 'os.path.exists()' function in Python is used to check if a path exists, regardless of whether it's a file or directory."
How do you calculate the length of a string in Python?,"You can calculate the length of a string in Python using the 'len()' function. For example, 'length = len(my_string)'"
What is the purpose of the 'shutil' module in Python?,"The 'shutil' module in Python provides functions for file operations, such as copying, moving, and deleting files and directories."
How do you check if two strings are equal in Python?,"You can check if two strings are equal in Python using the '==' operator. For example, 'if string1 == string2:'"
What is the purpose of the 'sys.stderr' object in Python?,"The 'sys.stderr' object in Python represents the standard error stream, which is used for printing error messages and traceback information."
What is the purpose of the 'collections.deque' class in Python?,The 'collections.deque' class in Python is a double-ended queue implementation that allows efficient insertion and deletion of elements from both ends of the queue.
How do you check if a number is an integer in Python?,"You can check if a number is an integer in Python using the 'isinstance()' function with the 'int' type. For example, 'if isinstance(num, int):'"
What is the purpose of the 'sys.path' variable in Python?,The 'sys.path' variable in Python contains a list of directories where Python looks for modules when importing.
What is the purpose of the 'subprocess' module in Python?,"The 'subprocess' module in Python allows you to spawn new processes, connect to their input/output/error pipes, and obtain their return codes."
How do you remove elements from a list by index in Python?,"You can remove elements from a list by index in Python using the 'del' statement or the 'pop()' method. For example, 'del my_list[index]' or 'removed_element = my_list.pop(index)'"
What is the purpose of the 'sys.stdout' object in Python?,"The 'sys.stdout' object in Python represents the standard output stream, which is used for printing normal program output."
What is the purpose of the 'os.path.abspath()' function in Python?,The 'os.path.abspath()' function in Python is used to get the absolute path of a file or directory.
How do you check if a file is readable or writable in Python?,"You can check if a file is readable or writable in Python using the 'os.access()' function. For example, 'if os.access(filename, os.R_OK):' or 'if os.access(filename, os.W_OK):'"
What is the purpose of the 'sys.platform' variable in Python?,The 'sys.platform' variable in Python contains a string that identifies the operating system platform for which Python was compiled.
"How do you create an empty list, dictionary, or set in Python?","You can create an empty list, dictionary, or set in Python using square brackets, curly braces, or the 'set()' constructor, respectively. For example, 'my_list = []', 'my_dict = {}', or 'my_set = set()'"
What is the purpose of the 'platform' module in Python?,"The 'platform' module in Python provides functions for retrieving information about the underlying platform, such as the operating system, architecture, and hardware."
What is the purpose of the 'contextlib' module in Python?,"The 'contextlib' module in Python provides utilities for working with context managers, such as the 'contextmanager' decorator for creating custom context managers."
How do you check if a file is a directory or a regular file in Python?,"You can check if a file is a directory or a regular file in Python using the 'os.path.isdir()' and 'os.path.isfile()' functions, respectively."
What is the purpose of the 'os.path.basename()' function in Python?,"The 'os.path.basename()' function in Python is used to get the base name of a file path, excluding the directory part."
How do you concatenate lists in Python?,"You can concatenate lists in Python using the '+' operator or the 'extend()' method. For example, 'concatenated_list = list1 + list2' or 'list1.extend(list2)'"
What is the purpose of the 'sys.maxsize' variable in Python?,"The 'sys.maxsize' variable in Python contains the maximum size of a list, tuple, or range on the current platform."
How do you iterate over a string in reverse order in Python?,"You can iterate over a string in reverse order in Python by using slicing notation with a negative step. For example, 'for char in my_string[::-1]:'"
What is the purpose of the 'time.sleep()' function in Python?,The 'time.sleep()' function in Python is used to suspend execution of the current thread for a specified number of seconds.
What is the purpose of the 'os.path.dirname()' function in Python?,"The 'os.path.dirname()' function in Python is used to get the directory part of a file path, excluding the base name."
How do you check if a string contains only alphanumeric characters in Python?,You can check if a string contains only alphanumeric characters in Python using the 'isalnum()' method.
What is the purpose of the 'struct' module in Python?,"The 'struct' module in Python provides functions for packing and unpacking structured binary data, such as integers and floats, into and from bytes objects."
What is the purpose of the 'sys.getsizeof()' function in Python?,The 'sys.getsizeof()' function in Python is used to get the size of an object in bytes.
What is the purpose of the 'os.path.split()' function in Python?,The 'os.path.split()' function in Python is used to split a file path into its directory and base name parts.
How do you convert a string to a datetime object in Python?,"You can convert a string to a datetime object in Python using the 'strptime()' method of the 'datetime' module. For example, 'datetime_object = datetime.strptime(date_string, format)'"
What is the purpose of the 'hashlib' module in Python?,"The 'hashlib' module in Python provides functions for hashing data using various cryptographic hash algorithms, such as MD5 and SHA-1."
How do you check if a string contains another substring in Python?,"You can check if a string contains another substring in Python using the 'in' operator or the 'find()' method. For example, 'if substring in my_string:' or 'if my_string.find(substring) != -1:'"
How do you convert a string to a list of words in Python?,"You can convert a string to a list of words in Python using the 'split()' method. For example, 'word_list = my_string.split()'"
How do you check if a string contains only digits in Python?,You can check if a string contains only digits in Python using the 'isdigit()' method.
What is the purpose of the 'os.path.realpath()' function in Python?,"The 'os.path.realpath()' function in Python is used to get the canonical path of a file or directory, resolving any symbolic links."
How do you check if a string contains only letters in Python?,You can check if a string contains only letters in Python using the 'isalpha()' method.
What is the purpose of the 'os.path.relpath()' function in Python?,The 'os.path.relpath()' function in Python is used to get the relative path from one specified path to another.
What is the purpose of the 'os.path.getsize()' function in Python?,The 'os.path.getsize()' function in Python is used to get the size of a file in bytes.
What is the purpose of the 'os.path.commonprefix()' function in Python?,The 'os.path.commonprefix()' function in Python is used to find the longest common prefix path of multiple paths.
How do you remove whitespace from the beginning or end of a string in Python?,You can remove whitespace from the beginning or end of a string in Python using the 'strip()' method.
What is the purpose of the 'os.path.samefile()' function in Python?,The 'os.path.samefile()' function in Python is used to check if two file paths refer to the same file.
What is the purpose of the 'os.path.splitdrive()' function in Python?,The 'os.path.splitdrive()' function in Python is used to split a file path into the drive part and the rest of the path.
How do you convert a list of strings to lowercase or uppercase in Python?,You can convert a list of strings to lowercase or uppercase in Python using list comprehension with the 'lower()' or 'upper()' methods.
What is the purpose of the 'os.path.supports_unicode_filenames' variable in Python?,The 'os.path.supports_unicode_filenames' variable in Python indicates whether the file system supports Unicode filenames.
What is the purpose of the 'os.path.isabs()' function in Python?,The 'os.path.isabs()' function in Python is used to check if a path is an absolute path.
How do you check if a string contains any whitespace characters in Python?,You can check if a string contains any whitespace characters in Python using the 'isspace()' method or by iterating over the string.
What is the purpose of the 'os.path.islink()' function in Python?,The 'os.path.islink()' function in Python is used to check if a path refers to a symbolic link.
How do you remove duplicate elements from a list in Python?,"You can remove duplicate elements from a list in Python by converting it to a set and then back to a list, or by using list comprehension with 'not in' condition."
What is the purpose of the 'os.path.ismount()' function in Python?,The 'os.path.ismount()' function in Python is used to check if a path is a mount point.
How do you find the maximum or minimum value in a list in Python?,"You can find the maximum or minimum value in a list in Python using the 'max()' or 'min()' functions, respectively."
What is the purpose of the 'os.path.expanduser()' function in Python?,The 'os.path.expanduser()' function in Python is used to expand the '~' (tilde) character in a file path to the user's home directory.
How do you convert a string to title case in Python?,You can convert a string to title case in Python using the 'title()' method.
What is the purpose of the 'os.path.expandvars()' function in Python?,The 'os.path.expandvars()' function in Python is used to expand environment variables in a file path.
How do you convert a list of integers to a string in Python?,You can convert a list of integers to a string in Python using list comprehension with the 'str()' function.
What is the purpose of the 'os.path.getctime()' function in Python?,The 'os.path.getctime()' function in Python is used to get the creation time of a file.
What is the purpose of the 'os.path.getmtime()' function in Python?,The 'os.path.getmtime()' function in Python is used to get the modification time of a file.
What is the purpose of the 'os.path.getatime()' function in Python?,The 'os.path.getatime()' function in Python is used to get the last access time of a file.
How do you count the occurrences of a specific element in a list in Python?,You can count the occurrences of a specific element in a list in Python using the 'count()' method.
How do you remove elements from a list by value in Python?,You can remove elements from a list by value in Python using the 'remove()' method.
What is the purpose of the 'os.path.normpath()' function in Python?,"The 'os.path.normpath()' function in Python is used to normalize a file path, resolving any redundant separators and references to the current and parent directories."
How do you check if a list contains a specific element in Python?,"You can check if a list contains a specific element in Python using the 'in' operator. For example, 'if element in my_list:'"
How do you find the maximum or minimum element in a list in Python?,"You can find the maximum or minimum element in a list in Python using the 'max()' or 'min()' functions, respectively. For example, 'max(my_list)' or 'min(my_list)'"
How do you check if all elements in a list satisfy a condition in Python?,"You can check if all elements in a list satisfy a condition in Python using the 'all()' function with a generator expression or a lambda function. For example, 'all(x > 0 for x in my_list)'"
How do you transpose a matrix in Python?,"You can transpose a matrix in Python using list comprehension or the 'zip()' function. For example, '[[row[i] for row in matrix] for i in range(len(matrix[0]))]' or 'list(zip(*matrix))'"
How do you convert a list of tuples to a list of elements in Python?,"You can convert a list of tuples to a list of elements in Python using list comprehension or the 'itertools.chain()' function. For example, '[item for sublist in list_of_tuples for item in sublist]' or 'list(itertools.chain.from_iterable(list_of_tuples))'"
How do you check if a list is sorted in Python?,"You can check if a list is sorted in Python by comparing it to a sorted version of itself using the '== operator'. For example, 'if my_list == sorted(my_list):'"
How do you remove the first occurrence of an element from a list in Python?,"You can remove the first occurrence of an element from a list in Python using the 'remove()' method. For example, 'my_list.remove(element)'"
How do you reverse the order of elements in a list in Python?,"You can reverse the order of elements in a list in Python using the 'reverse()' method. For example, 'my_list.reverse()'"
How do you check if a list contains only unique elements in Python?,"You can check if a list contains only unique elements in Python by converting it to a set (which automatically removes duplicates) and comparing the lengths of the original list and the set. For example, 'if len(my_list) == len(set(my_list)):'"
How do you shuffle a list in Python?,"You can shuffle a list in Python using the 'shuffle()' function from the 'random' module. For example, 'random.shuffle(my_list)'"
"How do you remove elements from a list by value in Python, preserving the order?","You can remove elements from a list by value in Python while preserving the order by using list comprehension with a condition. For example, '[item for item in my_list if item != value]'"
What is the purpose of the 'array' module in Python?,"The 'array' module in Python provides support for efficient arrays of numeric data, allowing you to create arrays with fixed data types for improved performance and memory efficiency."
How do you check if two lists are equal in Python?,"You can check if two lists are equal in Python by comparing them using the '==' operator. For example, 'if list1 == list2:'"
How do you find the intersection of two lists in Python?,"You can find the intersection of two lists in Python using the '&' operator or the 'intersection()' method. For example, 'list1 & list2' or 'set(list1).intersection(list2)'"
How can you leverage version control systems like Git for collaboration and reproducibility in data analysis projects?,"Utilize Git to track changes in your code and data, enabling collaboration with others and reverting to previous versions if needed."
How do you write modular and reusable code functions for better organization and maintainability of your data analysis scripts?,"Breaking down your code into well-defined functions improves readability, reduces redundancy, and promotes code reuse."
How can you document your code using comments or docstrings to explain functionality and improve code understanding?,Clear and concise comments within your code and docstrings for functions enhance readability and maintainability for both yourself and others.
How do you perform feature selection techniques like recursive feature elimination (RFE) to identify the most relevant features for machine learning models?,"This technique iteratively removes features that contribute least to model performance, leading to a more concise and effective feature set."
How can you handle imbalanced class distributions with techniques like SMOTE (Synthetic Minority Oversampling Technique) or cost-sensitive learning?,"SMOTE creates synthetic data points for the minority class to address imbalances, while cost-sensitive learning assigns higher costs to misclassifications of the minority class."
How do you perform model selection techniques like cross-validation or grid search to choose the best model for your data and task?,"Cross-validation evaluates model performance on different subsets of data, while grid search explores a range of hyperparameter values to find the optimal configuration."
How can you perform ensemble learning techniques like AdaBoost or Gradient Boosting to improve model robustness and performance?,"By combining predictions from multiple weak learners (models), these techniques can achieve better performance than individual models."
How do you handle regularization techniques like L1/L2 regularization to prevent overfitting in machine learning models?,"Regularization penalizes model complexity, helping to prevent overfitting and improve model generalization to unseen data."
How can you perform early stopping to prevent overfitting in machine learning models?,"This technique stops training the model once validation performance starts to decline, preventing it from memorizing the training data too much."
How can you utilize convolutional neural networks (CNNs) for tasks like image recognition or time series forecasting?,CNNs are specifically designed to extract features from spatial data like images and can be effective for tasks like image classification or time series analysis.
How do you perform recurrent neural networks (RNNs) for tasks like natural language processing (NLP) or sequence modeling?,"RNNs are able to process sequential data and capture dependencies between elements, making them suitable for tasks like language translation or sentiment analysis."
How can you address vanishing gradients or exploding gradients in deep learning models with techniques like gradient clipping?,"These issues can hinder training in deep networks. Gradient clipping helps by limiting the magnitude of gradients during backpropagation, allowing for more stable training."
How can you use data analysis to perform customer churn prediction and identify at-risk customers?,Techniques like survival analysis or machine learning models can help predict customer churn and enable proactive customer retention strategies.
How do you perform recommendation systems to suggest relevant products or services to customers?,"Recommendation systems leverage user behavior data to suggest items that users might be interested in, fostering customer engagement and sales."
How can you use data analysis for price optimization and setting optimal prices for products or services?,"By analyzing customer behavior and market trends, data analysis can inform pricing strategies to maximize revenue or market share."
How do you iterate over elements in a list using a for loop in Python?,Utilize a for loop with an iterator variable to access each element in the list.
What is the difference between a list and a tuple in Python?,"Lists are mutable (changeable), while tuples are immutable (unchangeable). Use lists when you need to modify elements, and tuples when you need a fixed data structure."
How do you define and call a function in Python?,"Use the def keyword to define a function with a name, parameters, and a code block. Call the function using its name and passing any required arguments."
How do you create a dictionary in Python and access its elements?,Use curly braces {} to create a dictionary with key-value pairs. Access values using the corresponding keys within square brackets [].
How do you concatenate (join) strings in Python?,"Use the + operator to concatenate strings. Alternatively, string formatting methods like f-strings provide more control over formatting."
How do you convert a string to uppercase or lowercase in Python?,"Use methods like upper() or lower() on string objects to convert them to uppercase or lowercase, respectively."
How do you slice elements from a list or string in Python?,"Use colon notation [start:end:step] to extract a portion of a list or string. Specify the starting index, ending index (exclusive), and step size (defaults to 1)."
"How do you calculate descriptive statistics (mean, median, standard deviation) for a numerical column in a pandas DataFrame?","Use methods like .mean(), .median(), and .std() on a numeric column within a DataFrame."
How do you perform basic data cleaning tasks like handling missing values and outliers in pandas DataFrames?,"Use methods like .dropna() or .fillna() to handle missing values, and techniques like IQR (Interquartile Range) to identify and potentially remove outliers."
"How can you group data by a specific column in a pandas DataFrame and calculate aggregate statistics (e.g., sum, mean) for each group?","Use the .groupby() method with a column name to group data, and then apply aggregation functions like .sum() or .mean() on the grouped data."
How do you perform data merging or joining in pandas DataFrames to combine data from multiple sources based on common keys?,"Use methods like .merge() with appropriate parameters (e.g., on, how) to join DataFrames based on shared columns."
"How do you create different chart types (line charts, bar charts, histograms) using the matplotlib library?","Utilize functions like plot() for line charts, bar() for bar charts, and hist() for histograms within matplotlib."
"How can you customize plot elements like labels, titles, and legend in Python visualizations?","Use methods provided by plotting libraries to set labels, titles, legends, and customize the visual appearance of your plots."
"How do you save plots created with matplotlib to image files (e.g., PNG, JPG)?","Use the pyplot.savefig() function, specifying the filename and desired image format."
How can you perform exploratory data analysis (EDA) techniques like boxplots or scatter plots to understand relationships between variables?,Utilize visualizations like boxplots to explore distributions and scatter plots to visualize relationships between numeric variables.
How do you handle categorical features in data analysis tasks?,Techniques like one-hot encoding or label encoding can be used to convert categorical features into numerical representations suitable for machine learning models.
How can you create new features from existing ones in a pandas DataFrame through feature engineering techniques?,"Combine existing features, perform calculations, or create interaction features to potentially improve model performance."
How do you concatenate two lists in Python?,"You can concatenate two lists in Python using the '+' operator or the 'extend()' method. For example, 'list1 + list2' or 'list1.extend(list2)'"
What is the purpose of the 'os.path.isfile()' function in Python?,The 'os.path.isfile()' function in Python is used to check if a path refers to an existing file.
How do you split a string into a list of words in Python?,"You can split a string into a list of words in Python using the 'split()' method. For example, 'my_string.split()'"
What is the purpose of the 'datetime.timedelta' class in Python?,"The 'datetime.timedelta' class in Python represents a duration of time, allowing you to perform arithmetic operations on dates and times."
How do you find the union of two sets in Python?,"You can find the union of two sets in Python using the '|' operator or the 'union()' method. For example, 'set1 | set2' or 'set1.union(set2)'"
What is the purpose of the 'itertools.chain()' function in Python?,The 'itertools.chain()' function in Python is used to concatenate multiple iterables into a single iterable.
How do you check if a string starts with a specific prefix in Python?,"You can check if a string starts with a specific prefix in Python using the 'startswith()' method. For example, 'if my_string.startswith(prefix):'"
How do you iterate over the lines of a file in Python?,"You can iterate over the lines of a file in Python using a 'for' loop. For example, 'for line in file_object:'"
How do you check if all elements in a list are true in Python?," ""You can check if all elements in a list are true in Python using the 'all()' function. For example"
What is the purpose of the 'max()' function in Python?," ""The 'max()' function in Python is used to find the largest element in an iterable."""
What is the purpose of the 'min()' function in Python?," ""The 'min()' function in Python is used to find the smallest element in an iterable."""
What is the purpose of the 'any()' function in Python?," ""The 'any()' function in Python is used to check if any element in an iterable is true."""
How do you find the length of a list in Python?," ""You can find the length of a list in Python using the 'len()' function. For example"
What is the purpose of the 'sum()' function in Python?," ""The 'sum()' function in Python is used to find the sum of elements in an iterable."""
What is the purpose of the 'next()' function in Python?," ""The 'next()' function in Python is used to retrieve the next item from an iterator."""
What is the purpose of the 'len()' function in Python?," ""The 'len()' function in Python is used to find the length of an object"
How do you convert a list to a string in Python?," ""You can convert a list to a string in Python using the 'join()' method. For example"
How do you check if a string is uppercase in Python?," ""You can check if a string is uppercase in Python using the 'isupper()' method. For example"
What is the purpose of the 'abs()' function in Python?," ""The 'abs()' function in Python is used to find the absolute value of a number."""
What is the purpose of the 'isnumeric()' method in Python?," ""The 'isnumeric()' method in Python is used to check if a string contains only numeric characters."""
How do you check if a string ends with a specific suffix in Python?," ""You can check if a string ends with a specific suffix in Python using the 'endswith()' method. For example"
What is the purpose of the 'isdecimal()' method in Python?," ""The 'isdecimal()' method in Python is used to check if a string contains only decimal characters."""
How do you remove an element by index from a list in Python?," ""You can remove an element by index from a list in Python using the 'pop()' method. For example"
What is the purpose of the 'isspace()' method in Python?," ""The 'isspace()' method in Python is used to check if a string contains only whitespace characters."""
How do you check if a string contains only lowercase characters in Python?," ""You can check if a string contains only lowercase characters in Python using the 'islower()' method. For example"
What is the purpose of the 'isprintable()' method in Python?," ""The 'isprintable()' method in Python is used to check if a string contains only printable characters."""
How do you check if a string contains only titlecased characters in Python?," ""You can check if a string contains only titlecased characters in Python using the 'istitle()' method. For example"
What is the purpose of a lambda function in Python?,A lambda function in Python is a small anonymous function defined using the lambda keyword. It can take any number of arguments but can only have one expression.
How do you create a multiline string in Python?,"You can create a multiline string in Python using triple quotes (''' or ""). For example"
How do you remove leading and trailing whitespace from a string in Python?,"You can remove leading and trailing whitespace from a string in Python using the 'strip()' method. For example, 'my_string.strip()'"
How do you check if a string is a valid identifier in Python?,"You can check if a string is a valid identifier in Python using the 'isidentifier()' method. For example, 'if my_string.isidentifier():'"
What is the purpose of the 'compile()' function in Python?,The 'compile()' function in Python is used to compile a Python source into a code object that can be executed by the 'exec()' function or 'eval()' function.
How do you check if an object has a given attribute in Python?,"You can check if an object has a given attribute in Python using the 'hasattr()' function. For example, 'if hasattr(obj, 'attribute'):'"
What is the purpose of the 'eval()' function in Python?,The 'eval()' function in Python is used to evaluate a Python expression stored in a string and return the result.
How do you generate a random number in Python?,"You can generate a random number in Python using the 'random' module. For example, 'random.randint(a, b)'"
What is the purpose of the 'property()' function in Python?,"The 'property()' function in Python is used to create properties on a class. It allows you to define custom behavior for getting, setting, and deleting attributes."
How do you check if a string contains only ASCII characters in Python?,"You can check if a string contains only ASCII characters in Python using the 'isascii()' method. For example, 'if my_string.isascii():'"
What is the purpose of the 'staticmethod()' function in Python?,The 'staticmethod()' function in Python is used to create a static method in a class. Static methods belong to the class rather than an instance and can be called without creating an object of the class.
How do you concatenate multiple strings in Python?,"You can concatenate multiple strings in Python using the '+' operator or the 'join()' method. For example, 'string1 + string2' or ''.join([string1, string2])"
What is the purpose of the 'iter()' function in Python?,The 'iter()' function in Python is used to create an iterator object from an iterable.
How do you check if a number is a palindrome in Python?,"You can check if a number is a palindrome in Python by converting it to a string and comparing it to its reverse. For example, 'if str(num) == str(num)[::-1]:'"
What is the purpose of the 'type()' function in Python?,The 'type()' function in Python is used to get the type of an object or to create a new type.
What is the purpose of the 'exec()' function in Python?,The 'exec()' function in Python is used to execute Python code dynamically.
How do you flatten a list of lists in Python?,"You can flatten a list of lists in Python using list comprehension or the 'itertools.chain()' function. For example, '[item for sublist in my_list for item in sublist]'"
What is the purpose of the 'staticmethod()' decorator in Python?,The 'staticmethod()' decorator in Python is used to define a static method in a class.
How do you calculate the greatest common divisor (GCD) of two numbers in Python?,"You can calculate the greatest common divisor (GCD) of two numbers in Python using the 'gcd()' function from the 'math' module or using the 'math.gcd()' function. For example, 'math.gcd(a, b)'"
How do you remove duplicates from a list in Python without preserving the order?,"You can remove duplicates from a list in Python without preserving the order by converting it to a set and then back to a list. For example, 'list(set(my_list))'"
What is the purpose of the 'dir()' function in Python?,The 'dir()' function in Python is used to list the names of the attributes and methods of an object.
What is the purpose of the 'classmethod()' decorator in Python?,The 'classmethod()' decorator in Python is used to define a class method in a class.
What is the purpose of the 'callable()' function in Python?,"The 'callable()' function in Python is used to check if an object is callable (i.e., can be called as a function)."
How do you convert a list of tuples into a dictionary in Python?,"You can convert a list of tuples into a dictionary in Python using dictionary comprehension. For example, '{k: v for k, v in my_list}'"
How do you concatenate a list of strings into a single string in Python?,"You can concatenate a list of strings into a single string in Python using the 'join()' method. For example, '''.join(my_list)''"
How do you create a set in Python?,"You can create a set in Python using curly braces '{}' or the 'set()' constructor. For example, 'my_set = {1, 2, 3}' or 'my_set = set([1, 2, 3])'"
What is the purpose of the 'slice()' function in Python?,"The 'slice()' function in Python is used to create a slice object that can be used to slice sequences like lists, tuples, and strings."
